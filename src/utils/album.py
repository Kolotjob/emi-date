from aiogram import BaseMiddleware, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from typing import Callable, Awaitable, Dict, Any, List, Optional
from cachetools import TTLCache
from asyncio import sleep
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from src.models import User
from aiogram.types import Message
from typing import Callable, Awaitable, Dict, Any, List
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext, BaseStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from src.utils.state import RegState
from aiogram.types import ContentType


DEFAULT_LATENCY = 0.2
DEFAULT_TTL = 0.600

router = Router()
# Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏-–∞–ª—å–±–æ–º–æ–≤
class AlbumMiddleware(BaseMiddleware):
    def __init__(
        self,
        groupmedia_handler: Callable[[Message, List[Dict[str, str]], List[int]], Awaitable[Any]],
        latency: float = DEFAULT_LATENCY,
        ttl: float = DEFAULT_TTL,
    ) -> None:
        super().__init__()
        self.groupmedia_handler = groupmedia_handler
        self.latency = latency
        self.cache: TTLCache = TTLCache(maxsize=10_000, ttl=ttl)

    @staticmethod
    async def get_media_data(message: Message) -> Optional[Dict[str, str]]:
        if message.photo:
            return {"file_id": message.photo[-1].file_id, "type": "photo", "message_id": message.message_id}
        if message.video:
            return {"file_id": message.video.file_id, "type": "video", "message_id": message.message_id}
        return None

    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.TelegramObject,
        data: Dict[str, Any],
    ) -> Any:
        if isinstance(event, Message) and event.media_group_id is not None:
            state: FSMContext = data.get("state")

            if not state:
                return await handler(event, data)

            current_state: Optional[State] = await state.get_state()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ RegState.media
            if current_state != "RegState:media":
                return 403

            key = event.media_group_id
            media_data = await self.get_media_data(event)

            if not media_data:
                return await handler(event, data)

            # –ï—Å–ª–∏ –∞–ª—å–±–æ–º —É–∂–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
            if key in self.cache:
                self.cache[key]["media_data"].append(media_data)
                return None

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–ª—å–±–æ–º –≤ –∫—ç—à–µ
            self.cache[key] = {
                "media_data": [media_data]
            }

            # –ñ–¥–µ–º, –ø–æ–∫–∞ –≤—Å–µ —á–∞—Å—Ç–∏ –∞–ª—å–±–æ–º–∞ –¥–æ–π–¥—É—Ç
            await sleep(self.latency)

            # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π –∞–ª—å–±–æ–º –∏ message_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ groupmedia_handler
            media_data_list = self.cache.pop(key)["media_data"]
            message_ids = [media["message_id"] for media in media_data_list]
            return await self.groupmedia_handler(event, media_data_list, message_ids, state)

        return await handler(event, data)
    




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –º–µ–¥–∏–∞
@router.message(RegState.media)
async def set_media(message: types.Message, user: User, state: FSMContext, lang: str):
    if message.media_group_id is None and (message.photo or message.video):  
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ
        if user:
            media = user.medias or []
            if len(media) < 3:
                media_data = {
                    "file_id": message.photo[-1].file_id if message.photo else message.video.file_id,
                    "type": "photo" if message.photo else "video"
                }
                await message.bot.delete_message(message.from_user.id, message.message_id)
                media.append(media_data)
                user.medias = media
                await user.save()

                

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                data = await state.get_data()
                msg_id = None
                if "idmsg_media" in data:
                    msg_id=data["idmsg_media"]
                count = len(media)
                if count ==3:
                    txt = (
                    f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {count}/3 –º–µ–¥–∏–∞. –ù–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'." 
                    if lang == "ru" 
                    else f"Saved {count}/3 media. Click 'Save'."
                )
                else:   
                    txt = (
                        f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {count}/3 –º–µ–¥–∏–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –æ–¥–Ω–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'." 
                        if lang == "ru" 
                        else f"Saved {count}/3 media. Send another one or click 'Save'."
                    )

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å ‚úÖ" if lang == "ru" else "Save ‚úÖ", callback_data="save_album")]
                ])

                if msg_id:
                    try:
                        await message.bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id, text=txt, reply_markup=keyboard)
                    except:
                        sent_message = await message.bot.send_message(chat_id=message.chat.id, text=txt, reply_markup=keyboard)
                        await state.update_data(idmsg_media=sent_message.message_id)
                else:
                    sent_message = await message.bot.send_message(chat_id=message.chat.id, text=txt, reply_markup=keyboard)
                    await state.update_data(idmsg_media=sent_message.message_id)
            else:
                txt = "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–∏–∞! üì∏" if lang == "ru" else "You have already sent the maximum amount of media! üì∏"
                await message.answer(txt)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏-–∞–ª—å–±–æ–º–æ–≤
async def groupmedia(message: Message, media_data_list: List[Dict[str, str]], message_ids , state: FSMContext):
    
    chat_id = message.chat.id  # –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π chat_id, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    print(message_ids)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    for id in message_ids:
        await message.bot.delete_message(message.from_user.id, id)
    user = await User.get_or_none(user_id=message.from_user.id)
    if not user:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å ‚úÖ" if user.lang == "ru" else "Save ‚úÖ", callback_data="save_album")]
    ])
    existing_files = user.medias or []

    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å 2 —Ñ–∞–π–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –∏–∑ –∞–ª—å–±–æ–º–∞
    if len(existing_files) == 2:
        existing_files.append(media_data_list[0])
        user.medias = existing_files
        await user.save()

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        txt = (
            "–°–æ—Ö—Ä–∞–Ω—ë–Ω —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –∏–∑ –∞–ª—å–±–æ–º–∞. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å 3/3 –º–µ–¥–∏–∞. –ù–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'." 
            if user.lang == "ru" 
            else "Only the first file from the album has been saved. You now have 3/3 media. Click 'Save'."
        )
        data = await state.get_data()
        msg_id = None
        if "idmsg_media" in data:
            msg_id=data["idmsg_media"]

        if msg_id:
            try:
                await message.bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id, text=txt, reply_markup=keyboard)
            except:
                sent_message = await message.bot.send_message(chat_id=message.chat.id, text=txt, reply_markup=keyboard)
                await state.update_data(idmsg_media=sent_message.message_id)
        else:
            sent_message = await message.bot.send_message(chat_id=message.chat.id, text=txt, reply_markup=keyboard)
            await state.update_data(idmsg_media=sent_message.message_id)
        return

    # –ï—Å–ª–∏ –∞–ª—å–±–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ 3 —Ñ–∞–π–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
    if len(existing_files) + len(media_data_list) > 3:
        remaining_slots = 3 - len(existing_files)
        existing_files.extend(media_data_list[:remaining_slots])
        user.medias = existing_files
        await user.save()

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞
        # await message.delete()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        txt = (
            f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ {remaining_slots} —Ñ–∞–π–ª–∞ –∏–∑ –∞–ª—å–±–æ–º–∞. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å 3/3 –º–µ–¥–∏–∞. –ù–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'."
            if user.lang == "ru" 
            else f"Only the first {remaining_slots} files from the album have been saved. You now have 3/3 media. Click 'Save'."
        )
        data = await state.get_data()
        msg_id = None
        if "idmsg_media" in data:
            msg_id=data["idmsg_media"]

        if msg_id:
            try:
                await message.bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id, text=txt, reply_markup=keyboard)
            except:
                sent_message = await message.bot.send_message(chat_id=message.chat.id, text=txt, reply_markup=keyboard)
                await state.update_data(idmsg_media=sent_message.message_id)
        else:
            sent_message = await message.bot.send_message(chat_id=message.chat.id, text=txt, reply_markup=keyboard)
            await state.update_data(idmsg_media=sent_message.message_id)
        return

    # –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –∞–ª—å–±–æ–º
    existing_files.extend(media_data_list)
    user.medias = existing_files
    await user.save()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if existing_files==3:
        txt = (
        f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(existing_files)}/3 –º–µ–¥–∏–∞. –ù–∞–∂–∞—Ç—å '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'."
        if user.lang == "ru" 
        else f"Saved {len(existing_files)}/3 media. Click 'Save'."
    )
    else:
        txt = (
            f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(existing_files)}/3 –º–µ–¥–∏–∞. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'."
            if user.lang == "ru" 
            else f"Saved {len(existing_files)}/3 media. You can send another one or click 'Save'."
        )

    

    # await message.answer(txt, reply_markup=keyboard)√∑
    data = await state.get_data()
    msg_id = None
    if "idmsg_media" in data:
        msg_id=data["idmsg_media"]

    if msg_id:
        try:
            await message.bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id, text=txt, reply_markup=keyboard)
        except:
            sent_message = await message.bot.send_message(chat_id=message.chat.id, text=txt, reply_markup=keyboard)
            await state.update_data(idmsg_media=sent_message.message_id)
    else:
        sent_message = await message.bot.send_message(chat_id=message.chat.id, text=txt, reply_markup=keyboard)
        await state.update_data(idmsg_media=sent_message.message_id)


@router.callback_query(lambda c: "skip_album" in c.data, RegState.media)
async def callback_handler(callback_query: CallbackQuery, user: User, state: FSMContext, lang: str):
   print(0)