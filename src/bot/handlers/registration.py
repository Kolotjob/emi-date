from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from src.models import User
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext, BaseStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from src.utils.state import RegState
from src.utils.comands import set_user_specific_commands, delete_user_specific_commands


router = Router()

@router.message(CommandStart())
async def handle_message1(message: types.Message, state: FSMContext, lang: str, user: User = None, user_none: bool = False):
    if user:
        # –ï—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        if user.name is None:
            txt = (
                "<b>üéâ</b>\n–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥(–ª–∞) –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π. üåü\n\n‚û°Ô∏è –£–∫–∞–∂–∏ —Å–≤–æ–µ –∏–º—è, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –Ω–∞—á–∞—Ç—å!"
                if lang == "ru" else
                "<b>üéâ</b>\nNow let‚Äôs set up your profile so you can start meeting interesting people faster. üåü\n\n‚û°Ô∏è Please provide your name to get started!"
            )
            await state.set_state(RegState.name)
            await message.answer(txt)

        # –ï—Å–ª–∏ –∏–º—è —É–∫–∞–∑–∞–Ω–æ, –Ω–æ –ø–æ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω
        elif user.name is not None and user.gender is None:
            txt = (
                f"<b>{user.name}, –∏–º—è —É–∫–∞–∑–∞–Ω–æ! ‚úÖ</b>\n–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª! üåü\n\n‚û°Ô∏è –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
                if lang == "ru" else
                f"<b>{user.name}, name provided! ‚úÖ</b>\nGreat, now specify your gender! üåü\n\n‚û°Ô∏è Choose one of the options:"
            )
            inline_keyboard = [
                [InlineKeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π" if lang == "ru" else "üë© Female", callback_data="gender_fem")],
                [InlineKeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π" if lang == "ru" else "üë® Male", callback_data="gender_mal")],
                [InlineKeyboardButton(text="üåà –î—Ä—É–≥–æ–π" if lang == "ru" else "üåà Other", callback_data="gender_oth")]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
            await state.set_state(RegState.gender)
            await message.answer(txt, reply_markup=keyboard)

        # –ï—Å–ª–∏ –ø–æ–ª —É–∫–∞–∑–∞–Ω, –Ω–æ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
        elif user.name is not None and user.gender is not None and user.orientation is None:
            txt = (
                "<b>–ü–æ–ª —É–∫–∞–∑–∞–Ω! ‚úÖ</b>\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é! üåü\n\n‚û°Ô∏è –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
                if lang == "ru" else
                "<b>Gender saved! ‚úÖ</b>\nNow specify your orientation! üåü\n\n‚û°Ô∏è Choose one of the options:"
            )
            if user.gender == 'mal':
                inline_keyboard = [
                    [InlineKeyboardButton(text="‚ù§Ô∏è –ì–µ—Ç–µ—Ä–æ" if lang == "ru" else "‚ù§Ô∏è Hetero", callback_data="orientation_hetero")],
                    [InlineKeyboardButton(text="üåà –ì–µ–π" if lang == "ru" else "üåà Gay", callback_data="orientation_gay")],
                    [InlineKeyboardButton(text="üíõ –ë–∏" if lang == "ru" else "üíõ Bi", callback_data="orientation_bi")]
                ]
            elif user.gender == 'fem':
                inline_keyboard = [
                    [InlineKeyboardButton(text="‚ù§Ô∏è –ì–µ—Ç–µ—Ä–æ" if lang == "ru" else "‚ù§Ô∏è Hetero", callback_data="orientation_hetero")],
                    [InlineKeyboardButton(text="üíñ –õ–µ—Å–±–∏" if lang == "ru" else "üíñ Lesbian", callback_data="orientation_lesbian")],
                    [InlineKeyboardButton(text="üíõ –ë–∏" if lang == "ru" else "üíõ Bi", callback_data="orientation_bi")]
                ]
            elif user.gender == 'oth':
                inline_keyboard = [
                    [InlineKeyboardButton(text="‚ù§Ô∏è –ì–µ—Ç–µ—Ä–æ" if lang == "ru" else "‚ù§Ô∏è Hetero", callback_data="orientation_hetero")],
                    [InlineKeyboardButton(text="üåà –ì–µ–π/–õ–µ—Å–±–∏" if lang == "ru" else "üåà Gay/Lesbian", callback_data="orientation_gay_lesbian")],
                    [InlineKeyboardButton(text="üíõ –ë–∏" if lang == "ru" else "üíõ Bi", callback_data="orientation_bi")]
                ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
            await state.set_state(RegState.orientation)
            await message.answer(txt, reply_markup=keyboard)

        # –ï—Å–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —É–∫–∞–∑–∞–Ω–∞, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        elif user.name is not None and user.gender is not None and  user.orientation is not None and user.for_whom is None:
            txt = (
                "<b>–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —É–∫–∞–∑–∞–Ω–∞! ‚úÖ</b>\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏, –∫–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å! üåü\n\n‚û°Ô∏è –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
                if lang == "ru" else
                "<b>Orientation saved! ‚úÖ</b>\nNow specify who you want to see! üåü\n\n‚û°Ô∏è Choose one of the options:"
            )
            inline_keyboard = [
                [InlineKeyboardButton(text="üë© –î–µ–≤—É—à–∫–∏" if lang == "ru" else "üë© Girls", callback_data="show_girls")],
                [InlineKeyboardButton(text="üë® –ü–∞—Ä–Ω–∏" if lang == "ru" else "üë® Boys", callback_data="show_boys")],
                [InlineKeyboardButton(text="üåç –í—Å–µ" if lang == "ru" else "üåç Everyone", callback_data="show_everyone")]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
            await state.set_state(RegState.show)
            await message.answer(txt, reply_markup=keyboard)

        # –ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–∫–∞–∑–∞–Ω—ã, –Ω–æ –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω
        elif user.name is not None and user.gender is not None and  user.orientation is not None and user.for_whom is not None and user.age is None:
            txt = (
                "<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–∫–∞–∑–∞–Ω—ã! ‚úÖ</b>\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç! üåü\n\n‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–º–∏–Ω–∏–º—É–º 16 –ª–µ—Ç):"
                if lang == "ru" else
                "<b>Viewing preferences saved! ‚úÖ</b>\nNow specify your age! üåü\n\n‚û°Ô∏è Enter your age (minimum 16 years):"
            )
            await state.set_state(RegState.age)
            await message.answer(txt)

        # –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        elif user.name is not None and user.gender is not None and  user.orientation is not None and user.for_whom is not None and user.age is not None and user.preferences is None:
            txt = (
                "<b>–í–æ–∑—Ä–∞—Å—Ç —É–∫–∞–∑–∞–Ω! ‚úÖ</b>\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–∏ —Ü–µ–ª–∏! üåü\n\n‚û°Ô∏è –í—ã–±–µ—Ä–∏ —Ü–µ–ª–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
                if lang == "ru" else
                "<b>Age saved! ‚úÖ</b>\nNow specify your goals! üåü\n\n‚û°Ô∏è Choose your goals from the options provided:"
            )
            inline_keyboard=[]
            if lang =="ru":
                inline_keyboard.append([InlineKeyboardButton(text="ü§ù –î—Ä—É–∂–±–∞", callback_data="interest_friendship")])
                inline_keyboard.append([InlineKeyboardButton(text="‚ù§Ô∏è –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="interest_romantic")])
                inline_keyboard.append([InlineKeyboardButton(text="üíº –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö", callback_data="interest_partnership")])
                inline_keyboard.append([InlineKeyboardButton(text="üåç –û–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É —ç–º–∏–≥—Ä–∞—Ü–∏–∏", callback_data="interest_emigration")])
            else:
                inline_keyboard.append([InlineKeyboardButton(text="ü§ù Friendship", callback_data="interest_friendship")])
                inline_keyboard.append([InlineKeyboardButton(text="‚ù§Ô∏è Romantic relationships", callback_data="interest_romantic")])
                inline_keyboard.append([InlineKeyboardButton(text="üíº Partnership in projects", callback_data="interest_partnership")])
                inline_keyboard.append([InlineKeyboardButton(text="üåç Discussion about emigration", callback_data="interest_emigration")])

            keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
            await state.set_state(RegState.preferences)
            await message.answer(txt, reply_markup=keyboard)
        elif user.name is not None and user.age is not None and user.gender is not None and  user.orientation is not None and user.for_whom is not None and user.preferences is not None and user.location is None:

            keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(
                        text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é" if lang == "ru" else "üìç Share Location",
                        request_location=True
                    )
                ]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

            if lang == "ru":
                txt = """<b>–¶–µ–ª–∏ –ø–æ–∏—Å–∫–∞ —É–∫–∞–∑–∞–Ω—ã! ‚úÖ</b>
–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–≤–æ—é –ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ª—é–¥–µ–π —Ä—è–¥–æ–º. üåç

‚û°Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –º—ã —É–≤–∏–¥–∏–º —Ç–æ–ª—å–∫–æ <b>–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>.
"""
            else:
                txt = """<b>Search goals saved! ‚úÖ</b>
Great, now we need your location to suggest people nearby. üåç

‚û°Ô∏è Please press the button below to share your location. Don‚Äôt worry, we will only see your <b>approximate location</b>.
"""
            await state.set_state(RegState.location)
            await message.bot.send_message(message.from_user.id ,text=txt, reply_markup=keyboard)

        elif user.name is not None and user.age is not None and user.gender is not None and  user.orientation is not None and user.for_whom is not None and user.preferences is not None and user.location is not None and user.about is None:
            if lang == "ru":
                txt = """<b>–õ–æ–∫–∞—Ü–∏—è —É–∫–∞–∑–∞–Ω–∞! ‚úÖ</b>
–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ. üåü

‚û°Ô∏è –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ: —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —Ö–æ–±–±–∏ –∏–ª–∏ —á—Ç–æ-—Ç–æ, —á—Ç–æ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∑–Ω–∞–ª–∏ –æ —Ç–µ–±–µ.
"""
            else:
                txt = """<b>Location saved! ‚úÖ</b>
Great, now tell us a bit about yourself. üåü

‚û°Ô∏è Write a short description about yourself: your interests, hobbies, or anything you‚Äôd like others to know about you.
"""
            await state.set_state(RegState.about)
            await message.bot.send_message(message.from_user.id, txt)
        elif user.name is not None and user.age is not None and user.gender is not None and user.orientation is not None and user.for_whom is not None and user.preferences is not None and user.location is not None and user.about is not None and user.hobbies is None:
            state_data = await state.get_data()
            current_page = state_data.get("current_page", 1)
            hobbies = state_data.get("selected_hobbies", [])  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ö–æ–±–±–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –±–∞–∑—ã

            if len(hobbies) < 5:
                await state.set_state(RegState.hobbies)

                # –£–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö —Å –Ω–æ–º–µ—Ä–∞–º–∏
                interests = [
                    (1, "–°–ø–æ—Ä—Ç", "Sport"), (2, "–ú—É–∑—ã–∫–∞", "Music"), (3, "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "Travel"), 
                    (4, "–ö–∏–Ω–æ", "Movies"), (5, "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "Cooking"), (6, "–ò—Å–∫—É—Å—Å—Ç–≤–æ", "Art"), 
                    (7, "–¢–∞–Ω—Ü—ã", "Dancing"), (8, "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "Technology"), (9, "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "Literature"), 
                    (10, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "Photography"), (11, "–ò–≥—Ä—ã", "Games"), (12, "–ü—Ä–∏—Ä–æ–¥–∞", "Nature"), 
                    (13, "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏", "Cars"), (14, "–ú–æ–¥–∞", "Fashion"), (15, "–ó–¥–æ—Ä–æ–≤—å–µ", "Health"),
                    (16, "–ô–æ–≥–∞", "Yoga"), (17, "–§–∏—Ç–Ω–µ—Å", "Fitness"), (18, "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "Astronomy"), 
                    (19, "–ò—Å—Ç–æ—Ä–∏—è", "History"), (20, "–ù–∞—É–∫–∞", "Science"), (21, "–¢–µ–∞—Ç—Ä", "Theater"), 
                    (22, "–í–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂", "Video Editing"), (23, "–†—ã–±–∞–ª–∫–∞", "Fishing"), (24, "–û—Ö–æ—Ç–∞", "Hunting"), 
                    (25, "–ì–∞–¥–∂–µ—Ç—ã", "Gadgets"), (26, "–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç", "Esports"), (27, "–ö–æ–º–∏–∫—Å—ã", "Comics"), 
                    (28, "–†—É–∫–æ–¥–µ–ª–∏–µ", "Handcraft"), (29, "–ú–µ–¥–∏—Ü–∏–Ω–∞", "Medicine"), (30, "–ñ–∏–≤–æ—Ç–Ω—ã–µ", "Animals"),
                    (31, "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è", "Astrology"), (32, "–≠–∑–æ—Ç–µ—Ä–∏–∫–∞", "Esoterics"), (33, "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", "Psychology"), 
                    (34, "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "Planning"), (35, "–í–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ", "Volunteering"), (36, "–ë–ª–æ–≥–∏–Ω–≥", "Blogging"), 
                    (37, "–î–∏–∑–∞–π–Ω", "Design"), (38, "–§–ª–æ—Ä–∏—Å—Ç–∏–∫–∞", "Floristry"), (39, "–ö–æ—Å–ø–ª–µ–π", "Cosplay"), 
                    (40, "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "Programming"), (41, "–ú–æ—Ç–æ—Å–ø–æ—Ä—Ç", "Motor Sports"), 
                    (42, "–§–∏–ª–æ—Å–æ—Ñ–∏—è", "Philosophy"), (43, "–ß—Ç–µ–Ω–∏–µ", "Reading"), (44, "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "Collecting"),
                    (45, "–õ—ã–∂–∏", "Skiing"), (46, "–°–Ω–æ—É–±–æ—Ä–¥", "Snowboarding"), (47, "–î–∞–π–≤–∏–Ω–≥", "Diving"), 
                    (48, "–ö–µ–º–ø–∏–Ω–≥", "Camping"), (49, "–ü–ª–∞–≤–∞–Ω–∏–µ", "Swimming"), (50, "–ë–µ–≥", "Running"), 
                    (51, "–¢—É—Ä–∏–∑–º", "Hiking"), (52, "–°—Ç—Ä–µ–ª—å–±–∞", "Shooting"), (53, "–ì–æ–ª—å—Ñ", "Golf"), 
                    (54, "–®–∞—Ö–º–∞—Ç—ã", "Chess"), (55, "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã", "Board Games"), (56, "–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞", "Journalism"), 
                    (57, "–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "Investing"), (58, "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "Cooking"), (59, "–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ", "Gardening"), (60, "–Ø–∑—ã–∫–æ–≤–æ–π –æ–±–º–µ–Ω", "Language Exchange"),
                ]
                page_size = 10
                start_index = (current_page - 1) * page_size
                end_index = start_index + page_size

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                inlinekeyboard = []
                row = []

                for i, (number, interest_ru, interest_en) in enumerate(interests[start_index:end_index], start=1):
                    text = ("üîπ" if str(number) in hobbies else "") + (interest_ru if lang == "ru" else interest_en)
                    row.append(InlineKeyboardButton(
                        text=text,
                        callback_data=f"intrs_{number}"
                    ))
                    if len(row) == 2 or i == len(interests[start_index:end_index]):
                        inlinekeyboard.append(row)
                        row = []

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                navigation_buttons = []
                if current_page > 1:
                    navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è" if lang == "ru" else "‚¨ÖÔ∏è Back", callback_data="intrs_page_back"))
                if end_index < len(interests):
                    navigation_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è" if lang == "ru" else "‚û°Ô∏è Next", callback_data="intrs_page_next"))
                if navigation_buttons:
                    inlinekeyboard.append(navigation_buttons)

                if len(hobbies) == 5:
                    inlinekeyboard.append(
                        [InlineKeyboardButton(text=f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å ({len(hobbies)}/5) ‚úÖ" if lang == "ru" else f"Save ({len(hobbies)}/5) ‚úÖ", callback_data="intrs_done")]
                    )

                keyboard = InlineKeyboardMarkup(inline_keyboard=inlinekeyboard)

                if lang == "ru":
                    if hobbies:
                        txt = f"<b>–£ –≤–∞—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ {len(hobbies)}/5 —É–≤–ª–µ—á–µ–Ω–∏–π ‚úÖ</b>\n"
                    else:
                        txt = ""
                    txt += "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–æ 5 —É–≤–ª–µ—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç —Ç–µ–±—è. üåü\n\n‚û°Ô∏è –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É–≤–ª–µ—á–µ–Ω–∏—è. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–∂–º–∏ \"<b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å‚úÖ</b>\"."
                else:
                    if hobbies:
                        txt = f"<b>You have already selected {len(hobbies)}/5 hobbies ‚úÖ</b>\n"
                    else:
                        txt = ""
                    txt += "Great, now select up to 5 hobbies that describe you. üåü\n\n‚û°Ô∏è Click on the buttons to select your hobbies. Once you're done, click \"<b>Save‚úÖ</b>\"."

                await state.update_data(current_page=current_page, hobbies=hobbies)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await message.answer(txt, reply_markup=keyboard)


            elif len(hobbies) == 5:
                txt = """

        –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç <b>1 –¥–æ 3 –º–µ–¥–∏–∞</b> (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –≤–∏–¥–µ–æ), —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º–æ–≥–ª–∏ —É–∑–Ω–∞—Ç—å –≤–∞—Å –ª—É—á—à–µ.  
        –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. ‚è©""" if lang == "ru" else """

        Now, please send <b>1 to 3 media</b> (photos or videos) so others can get to know you better.  
        Or press "Skip" to continue. ‚è©"""
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üîÑ" if lang == "ru" else "Skip üîÑ", callback_data="skip_album")]
                ])
                await state.set_state(RegState.media)
                data = await state.get_data()

                msg = await message.bot.send_message(chat_id=message.from_user.id, text=txt, reply_markup=keyboard)
                data["idmsg_media"] = msg.message_id
                await state.update_data(data=data)

        else:
            
            if lang == "ru":
                button_text = "üöÄ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"
            else:
                button_text = "üöÄ Start Search"

            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text=button_text)]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            await set_user_specific_commands(message.bot, message.from_user.id, lang )
            response = (
        "‚ÑπÔ∏è –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–æ–∫–æ–≤—ã–º –º–µ–Ω—é ‚ÜôÔ∏è\n—á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å." 
        if lang == "ru" 
        else "‚ÑπÔ∏è Use the side menu ‚ÜôÔ∏è\nto access subscription details or view your profile."
    )
            await message.answer(response, reply_markup=keyboard)

            
        









@router.message(Command("block"))
async def handle_message(message: types.Message, user: User = None, user_none: bool = False):
    user= await User.get_or_none(user_id=message.from_user.id)
    # if user:
    #     user.status_block="Deactive"
    #     await user.save()
    await delete_user_specific_commands(message.bot, message.from_user.id)

    

@router.message(Command("del"))
async def handle_message(message: types.Message, state: FSMContext, user: User = None, user_none: bool = False):
    user= await User.get_or_none(user_id=message.from_user.id)
    
    if user:
        await user.delete()
        # await user.save()

        
async def choise_lang(message: types.Message, lang: str):
    if lang['lang']=="ru":
    
        txt="""<b>–ü—Ä–∏–≤–µ—Ç! üëã</b>
–ù–∞ —Å–≤—è–∑–∏ <b>üíñEmi-Dateüíñ</b> ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –¥–ª—è –ª—é–¥–µ–π –≤ —ç–º–∏–≥—Ä–∞—Ü–∏–∏. üåç‚ú®

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ —É–¥–æ–±–µ–Ω:
"""
    else:
        txt="""<b>Hi there! üëã</b>
Welcome to <b>üíñEmi-Dateüíñ</b> ‚Äî your go-to bot for connecting with people in emigration. üåç‚ú®

To get started, please select your preferred language:
"""
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    
    inline_keyboard=[]
    inline_keyboard.append([InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")])
    inline_keyboard.append([InlineKeyboardButton(text="üá∫üá∏ English", callback_data="lang_en")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

    await message.answer(text=txt, reply_markup=keyboard)

















@router.callback_query(lambda c: "lang_" in c.data)
async def callback_handler(callback_query: CallbackQuery, state: FSMContext, lang: str):
    lang = (callback_query.data.split("_"))[1]
    user_id = callback_query.from_user.id
    user= await User.get_or_none(user_id=user_id)
    if user:
        user.lang=lang
        await user.save()
    if user.name==None:
        keyboard = None
        if lang == "ru":
            txt = """<b>–û—Ç–ª–∏—á–Ω–æ! üéâ</b>
–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π. üåü

"""
        else:
            txt = """<b>Great! üéâ</b
Tap /start to quickly find interesting people. üåü
    """
        await callback_query.bot.edit_message_text(text=txt, chat_id=user_id, message_id=callback_query.message.message_id, reply_markup=None)
        
       


  





