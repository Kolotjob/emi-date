from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from src.models import User
from aiogram.types import Message
from typing import Callable, Awaitable, Dict, Any, List
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext, BaseStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from src.utils.state import SearchPeople
from src.utils.add_profile import add_profile
from aiogram.types import ContentType


router = Router()

from tortoise.expressions import Q
from tortoise.query_utils import Prefetch
from typing import List
import math

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö)
def calculate_distance(lat1, lon1, lat2, lon2):
    radius = 6371  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    
    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)
    
    a = math.sin(dlat / 2) ** 2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    
    return radius * c

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def find_nearby_users(user: User, max_distance: float = 5000.0) -> List[User]:
    if not user.location:
        return []

    user_lat, user_lon = map(float, user.location.split(","))
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º
    potential_users = await User.filter(
        Q(status_block="Active") &
        Q(location__isnull=False) &
        ~Q(id=user.id) &  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ~Q(received_likes__from_user=user) &  # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö
        ~Q(blocked_by__from_user=user)  # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    ).prefetch_related(
        Prefetch("received_likes"),
        Prefetch("blocked_by")
    )

    filtered_users = []

    for potential_user in potential_users:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—É for_whom
        if user.for_whom == "all" or user.for_whom == potential_user.gender:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –æ–±—â–µ–≥–æ —É–≤–ª–µ—á–µ–Ω–∏—è
            if user.hobbies and potential_user.hobbies:
                common_hobbies = set(user.hobbies) & set(potential_user.hobbies)
                if common_hobbies:
                    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                    potential_lat, potential_lon = map(float, potential_user.location.split(","))
                    distance = calculate_distance(user_lat, user_lon, potential_lat, potential_lon)

                    if distance <= max_distance:
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        filtered_users.append((potential_user, distance))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    filtered_users.sort(key=lambda x: x[1])

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    return [user[0] for user in filtered_users]



@router.message(lambda message: message.text.lower() == ("üöÄ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫" or "üöÄ Start Search"))
async def handle_message1(message: types.Message, state: FSMContext, lang: str, user: User = None, user_none: bool = False):
    lang = lang if lang else ("ru" if message.from_user.language_code == "ru" else "en")

    if lang == "ru":
        txt = "üîé –ü–æ–∏—Å–∫ –Ω–∞—á–∞–ª—Å—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="‚ù§Ô∏è –õ–∞–π–∫" if lang=="ru" else "‚ù§Ô∏è Like"),
                    KeyboardButton(text="üíñ –°—É–ø–µ—Ä–ª–∞–π–∫" if lang=="ru" else "üíñ Superlike"),
                ],
                [
                    KeyboardButton(text="üëéüèª –î–∏–∑–ª–∞–π–∫" if lang=="ru" else "üëéüèª Dislike"),
                    KeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if lang=="ru" else "üö´ Block"),
                ],
                [
                    KeyboardButton(text="‚ùó –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è" if lang=="ru" else "‚ùó Report"),
                    KeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫" if lang=="ru" else "‚èπ Stop Search"),
                ]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    else:
        txt = "üîé Search started! Use the buttons below to interact."
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="‚ù§Ô∏è Like"),
                    KeyboardButton(text="üíñ Superlike"),
                ],
                [
                    KeyboardButton(text="üëéüèª Dislike"),
                    KeyboardButton(text="üö´ Block"),
                ],
                [
                    KeyboardButton(text="‚ùó Report"),
                    KeyboardButton(text="‚èπ Stop Search"),
                ]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

    await state.set_state(SearchPeople.search)
    await message.answer(txt, reply_markup=keyboard)
    await find_nearby_users(user)