from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from src.models import User,Like
from aiogram.types import Message
from typing import Callable, Awaitable, Dict, Any, List
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext, BaseStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from src.utils.state import SearchPeople
from src.utils.add_profile import add_profile
from aiogram.types import ContentType


router = Router()

from tortoise.expressions import Q
from tortoise.query_utils import Prefetch
from typing import List
import math

# –°–ª–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
INTERESTS = [
    (1, "–°–ø–æ—Ä—Ç", "Sport"), (2, "–ú—É–∑—ã–∫–∞", "Music"), (3, "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "Travel"), 
        (4, "–ö–∏–Ω–æ", "Movies"), (5, "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "Cooking"), (6, "–ò—Å–∫—É—Å—Å—Ç–≤–æ", "Art"), 
        (7, "–¢–∞–Ω—Ü—ã", "Dancing"), (8, "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "Technology"), (9, "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "Literature"), 
        (10, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "Photography"), (11, "–ò–≥—Ä—ã", "Games"), (12, "–ü—Ä–∏—Ä–æ–¥–∞", "Nature"), 
        (13, "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏", "Cars"), (14, "–ú–æ–¥–∞", "Fashion"), (15, "–ó–¥–æ—Ä–æ–≤—å–µ", "Health"),
        (16, "–ô–æ–≥–∞", "Yoga"), (17, "–§–∏—Ç–Ω–µ—Å", "Fitness"), (18, "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "Astronomy"), 
        (19, "–ò—Å—Ç–æ—Ä–∏—è", "History"), (20, "–ù–∞—É–∫–∞", "Science"), (21, "–¢–µ–∞—Ç—Ä", "Theater"), 
        (22, "–í–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂", "Video Editing"), (23, "–†—ã–±–∞–ª–∫–∞", "Fishing"), (24, "–û—Ö–æ—Ç–∞", "Hunting"), 
        (25, "–ì–∞–¥–∂–µ—Ç—ã", "Gadgets"), (26, "–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç", "Esports"), (27, "–ö–æ–º–∏–∫—Å—ã", "Comics"), 
        (28, "–†—É–∫–æ–¥–µ–ª–∏–µ", "Handcraft"), (29, "–ú–µ–¥–∏—Ü–∏–Ω–∞", "Medicine"), (30, "–ñ–∏–≤–æ—Ç–Ω—ã–µ", "Animals"),
        (31, "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è", "Astrology"), (32, "–≠–∑–æ—Ç–µ—Ä–∏–∫–∞", "Esoterics"), (33, "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", "Psychology"), 
        (34, "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "Planning"), (35, "–í–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ", "Volunteering"), (36, "–ë–ª–æ–≥–∏–Ω–≥", "Blogging"), 
        (37, "–î–∏–∑–∞–π–Ω", "Design"), (38, "–§–ª–æ—Ä–∏—Å—Ç–∏–∫–∞", "Floristry"), (39, "–ö–æ—Å–ø–ª–µ–π", "Cosplay"), 
        (40, "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "Programming"), (41, "–ú–æ—Ç–æ—Å–ø–æ—Ä—Ç", "Motor Sports"), 
        (42, "–§–∏–ª–æ—Å–æ—Ñ–∏—è", "Philosophy"), (43, "–ß—Ç–µ–Ω–∏–µ", "Reading"), (44, "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "Collecting"),
        (45, "–õ—ã–∂–∏", "Skiing"), (46, "–°–Ω–æ—É–±–æ—Ä–¥", "Snowboarding"), (47, "–î–∞–π–≤–∏–Ω–≥", "Diving"), 
        (48, "–ö–µ–º–ø–∏–Ω–≥", "Camping"), (49, "–ü–ª–∞–≤–∞–Ω–∏–µ", "Swimming"), (50, "–ë–µ–≥", "Running"), 
        (51, "–¢—É—Ä–∏–∑–º", "Hiking"), (52, "–°—Ç—Ä–µ–ª—å–±–∞", "Shooting"), (53, "–ì–æ–ª—å—Ñ", "Golf"), 
        (54, "–®–∞—Ö–º–∞—Ç—ã", "Chess"), (55, "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã", "Board Games"), (56, "–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞", "Journalism"), 
        (57, "–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "Investing"), (58, "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "Cooking"), (59, "–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ", "Gardening"), (60, "–Ø–∑—ã–∫–æ–≤–æ–π –æ–±–º–µ–Ω", "Language Exchange"),
    ]


PREFERENCES = {
    "ru": {
        "friendship": "ü§ù –î—Ä—É–∂–±–∞",
        "romantic": "‚ù§Ô∏è –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "partnership": "üíº –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö",
        "emigration": "üåç –û–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É —ç–º–∏–≥—Ä–∞—Ü–∏–∏"
    },
    "en": {
        "friendship": "ü§ù Friendship",
        "romantic": "‚ù§Ô∏è Romantic relationships",
        "partnership": "üíº Partnership in projects",
        "emigration": "üåç Discussion about emigration"
    }
}

GENDER = {
    "ru": {
        "fem": "üë© –ñ–µ–Ω—Å–∫–∏–π",
        "mal": "üë® –ú—É–∂—Å–∫–æ–π",
        "oth": "üåà –î—Ä—É–≥–æ–µ"
    },
    "en": {
        "fem": "üë© Female",
        "mal": "üë® Male",
        "oth": "üåà Other"
    }
}

WHO = {
    "ru":{"girls":"üë© –î–µ–≤—É—à–∫–∏",
    "boys":"üë® –ü–∞—Ä–Ω–∏",
    "all":"üåç –í—Å–µ"},
    "en":
    {
    "girls":"üë© Girls",
    "boys":"üë® Boys",
    "all":"üåç Everyone"
    }
}

ORI={
        "ru":{
                "hetero":"‚ù§Ô∏è –ì–µ—Ç–µ—Ä–æ",
                "gay":"üåà –ì–µ–π",
                "bi":"üíõ –ë–∏",
                "lesbian":"üíñ –õ–µ—Å–±–∏",
                "gay_lesbian":"üåà –ì–µ–π/–õ–µ—Å–±–∏",
                "oth":"üí´–î—Ä—É–≥–∞—è",
                "skip":"–ù–µ —É–∫–∞–∑–∞–Ω–∞"


        },
        "en":{
                "hetero":"‚ù§Ô∏è Hetero",
                "gay":"üåà Gay",
                "bi":"üíõ Bi",
                "lesbian":"üíñ Lesbian",
                "gay_lesbian":"üåà Gay/Lesbian",
                "oth":"üí´Other",
                "skip":"Not specified"
        }

}
MESSAGES = {
    "profile_not_found": {
        "ru": "<b>–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.",
        "en": "<b>Profile not found.</b>\nPlease register using the /start command."
    },
    "action_prompt": {
        "ru": "‚úèÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        "en": "‚úèÔ∏è <b>Select an action:</b>"
    },
    "edit_name": {
        "ru": "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
        "en": "Edit Name"
    },
    "edit_age": {
        "ru": "–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç",
        "en": "Edit Age"
    },
    "edit_gender": {
        "ru": "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª",
        "en": "Edit Gender"
    },
    "reset_profile": {
        "ru": "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ",
        "en": "Refill Profile"
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö)
def calculate_distance(lat1, lon1, lat2, lon2):
    radius = 6371  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    
    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)
    
    a = math.sin(dlat / 2) ** 2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    
    return radius * c

from geopy.geocoders import Nominatim
import ssl
import certifi
from aiogram.types import InputMediaPhoto, InputMediaVideo

def get_location_by_coordinates(latitude, longitude):
    geolocator = Nominatim(
        user_agent="my_geopy_app",
        timeout=10,
        ssl_context=ssl.create_default_context(cafile=certifi.where())
    )
    try:
        location = geolocator.reverse((latitude, longitude), exactly_one=True)
        if location:
            address = location.raw.get('address', {})
            city = address.get('city') or address.get('town') or address.get('village') or address.get('hamlet')
            return city or location.address
        else:
            return "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {e}"

async def find_suitable_profiles(user, lang):
    user_hobbies = set(user.hobbies or [])

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    potential_matches = await User.filter(
        status_block="Active",
        for_whom=user.gender,
    ).exclude(user_id=user.user_id)

    matches = []

    for potential_user in potential_matches:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–∞–π–∫–Ω—É–ª –ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–∫—É—â–µ–≥–æ
        already_liked = await Like.filter(from_user=potential_user, to_user=user).exists()

        # –ò—â–µ–º –æ–±—â–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è
        hobbies_match = user_hobbies.intersection(set(potential_user.hobbies or []))

        if hobbies_match:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            if user.location and potential_user.location:
                user_lat, user_lon = map(float, user.location.split(","))
                potential_lat, potential_lon = map(float, potential_user.location.split(","))

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é)
                distance = calculate_distance(user_lat, user_lon, potential_lat, potential_lon)
            else:
                distance = None

            matches.append((potential_user, hobbies_match, already_liked, distance))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é (–µ—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ)
    matches.sort(key=lambda x: x[3] if x[3] is not None else float('inf'))

    return matches

async def generate_profile_card(user, match, lang):
    hobbies_text = ", ".join([
        (interest[1] if lang == "ru" else interest[2])
        for interest in INTERESTS
        if str(interest[0]) in (match.hobbies or [])
    ])

    location_text = match.location or ("–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞" if lang == "ru" else "Location not provided")
    if "," in location_text:
        latitude, longitude = map(float, location_text.split(","))
        location_text = get_location_by_coordinates(latitude, longitude)
    
    description = (
        f"<b>{match.name}</b> \n"
        f"<b>{'–í–æ–∑—Ä–∞—Å—Ç' if lang == 'ru' else 'Age'}:</b> {match.age}\n"
        f"{GENDER[lang][match.gender]}\n"
        f"<b>{'–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è' if lang == 'ru' else 'Orientation'}:</b> {ORI[lang][match.orientation]}\n"
        f"{location_text}\n"
        f"<b>{'–¶–µ–ª–∏' if lang == 'ru' else 'Goals'}:</b> {PREFERENCES[lang][match.preferences]}\n"
        f"<b>{'–£–≤–ª–µ—á–µ–Ω–∏—è' if lang == 'ru' else 'Hobbies'}:</b> {hobbies_text}\n\n"
        f"{'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∞—Å –ª–∞–π–∫–Ω—É–ª!' if match.already_liked else ''}\n"
        f"_________________________\n{match.about or ''}\n"
    )

    media = match.medias or []
    if len(media) == 1:
        media_file = media[0]['file_id']
        if media[0]['type'] == 'photo':
            return InputMediaPhoto(media=media_file, caption=description)
        elif media[0]['type'] == 'video':
            return InputMediaVideo(media=media_file, caption=description)
    else:
        files = []
        i = 0
        for media_file in media:
            caption = description if i == 0 else None
            if media_file["type"] == "video":
                files.append(InputMediaVideo(media=media_file['file_id'], caption=caption))
                i += 1
            elif media_file['type'] == 'photo':
                files.append(InputMediaPhoto(media=media_file['file_id'], caption=caption))
                i += 1
        return files

async def start_search(user, state, bot):
    lang = user.lang if user.lang in ["ru", "en"] else "ru"
    matches = await find_suitable_profiles(user, lang)

    if not matches:
        await bot.send_message(user.user_id, "<b>–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</b>" if lang == "ru" else "<b>No suitable users found.</b>")
        return

    for match, hobbies_match, already_liked, distance in matches:
        profile_card = await generate_profile_card(user, match, lang)

        if isinstance(profile_card, list):
            await bot.send_media_group(user.user_id, profile_card)
        else:
            await bot.send_message(user.user_id, profile_card)


@router.message(lambda message: message.text.lower() == ("üöÄ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫" or "üöÄ Start Search"))
async def handle_message1(message: types.Message, state: FSMContext, lang: str, user: User = None, user_none: bool = False):
    lang = lang if lang else ("ru" if message.from_user.language_code == "ru" else "en")

    if lang == "ru":
        txt = "üîé –ü–æ–∏—Å–∫ –Ω–∞—á–∞–ª—Å—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="‚ù§Ô∏è –õ–∞–π–∫" if lang=="ru" else "‚ù§Ô∏è Like"),
                    KeyboardButton(text="üíñ –°—É–ø–µ—Ä–ª–∞–π–∫" if lang=="ru" else "üíñ Superlike"),
                ],
                [
                    KeyboardButton(text="üëéüèª –î–∏–∑–ª–∞–π–∫" if lang=="ru" else "üëéüèª Dislike"),
                    KeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if lang=="ru" else "üö´ Block"),
                ],
                [
                    KeyboardButton(text="‚ùó –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è" if lang=="ru" else "‚ùó Report"),
                    KeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫" if lang=="ru" else "‚èπ Stop Search"),
                ]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    else:
        txt = "üîé Search started! Use the buttons below to interact."
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="‚ù§Ô∏è Like"),
                    KeyboardButton(text="üíñ Superlike"),
                ],
                [
                    KeyboardButton(text="üëéüèª Dislike"),
                    KeyboardButton(text="üö´ Block"),
                ],
                [
                    KeyboardButton(text="‚ùó Report"),
                    KeyboardButton(text="‚èπ Stop Search"),
                ]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

    await state.set_state(SearchPeople.search)
    await message.answer(txt, reply_markup=keyboard)
    await start_search(user, state, message.bot)