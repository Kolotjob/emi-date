from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputMediaVideo
from src.models import User
from aiogram.filters import CommandStart, Command
from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from src.models import User
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext, BaseStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from src.utils.state import RegState

router = Router()

# –°–ª–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
INTERESTS = [
    (1, "–°–ø–æ—Ä—Ç", "Sport"), (2, "–ú—É–∑—ã–∫–∞", "Music"), (3, "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "Travel"), 
        (4, "–ö–∏–Ω–æ", "Movies"), (5, "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "Cooking"), (6, "–ò—Å–∫—É—Å—Å—Ç–≤–æ", "Art"), 
        (7, "–¢–∞–Ω—Ü—ã", "Dancing"), (8, "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "Technology"), (9, "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "Literature"), 
        (10, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "Photography"), (11, "–ò–≥—Ä—ã", "Games"), (12, "–ü—Ä–∏—Ä–æ–¥–∞", "Nature"), 
        (13, "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏", "Cars"), (14, "–ú–æ–¥–∞", "Fashion"), (15, "–ó–¥–æ—Ä–æ–≤—å–µ", "Health"),
        (16, "–ô–æ–≥–∞", "Yoga"), (17, "–§–∏—Ç–Ω–µ—Å", "Fitness"), (18, "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "Astronomy"), 
        (19, "–ò—Å—Ç–æ—Ä–∏—è", "History"), (20, "–ù–∞—É–∫–∞", "Science"), (21, "–¢–µ–∞—Ç—Ä", "Theater"), 
        (22, "–í–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂", "Video Editing"), (23, "–†—ã–±–∞–ª–∫–∞", "Fishing"), (24, "–û—Ö–æ—Ç–∞", "Hunting"), 
        (25, "–ì–∞–¥–∂–µ—Ç—ã", "Gadgets"), (26, "–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç", "Esports"), (27, "–ö–æ–º–∏–∫—Å—ã", "Comics"), 
        (28, "–†—É–∫–æ–¥–µ–ª–∏–µ", "Handcraft"), (29, "–ú–µ–¥–∏—Ü–∏–Ω–∞", "Medicine"), (30, "–ñ–∏–≤–æ—Ç–Ω—ã–µ", "Animals"),
        (31, "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è", "Astrology"), (32, "–≠–∑–æ—Ç–µ—Ä–∏–∫–∞", "Esoterics"), (33, "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", "Psychology"), 
        (34, "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "Planning"), (35, "–í–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ", "Volunteering"), (36, "–ë–ª–æ–≥–∏–Ω–≥", "Blogging"), 
        (37, "–î–∏–∑–∞–π–Ω", "Design"), (38, "–§–ª–æ—Ä–∏—Å—Ç–∏–∫–∞", "Floristry"), (39, "–ö–æ—Å–ø–ª–µ–π", "Cosplay"), 
        (40, "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "Programming"), (41, "–ú–æ—Ç–æ—Å–ø–æ—Ä—Ç", "Motor Sports"), 
        (42, "–§–∏–ª–æ—Å–æ—Ñ–∏—è", "Philosophy"), (43, "–ß—Ç–µ–Ω–∏–µ", "Reading"), (44, "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "Collecting"),
        (45, "–õ—ã–∂–∏", "Skiing"), (46, "–°–Ω–æ—É–±–æ—Ä–¥", "Snowboarding"), (47, "–î–∞–π–≤–∏–Ω–≥", "Diving"), 
        (48, "–ö–µ–º–ø–∏–Ω–≥", "Camping"), (49, "–ü–ª–∞–≤–∞–Ω–∏–µ", "Swimming"), (50, "–ë–µ–≥", "Running"), 
        (51, "–¢—É—Ä–∏–∑–º", "Hiking"), (52, "–°—Ç—Ä–µ–ª—å–±–∞", "Shooting"), (53, "–ì–æ–ª—å—Ñ", "Golf"), 
        (54, "–®–∞—Ö–º–∞—Ç—ã", "Chess"), (55, "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã", "Board Games"), (56, "–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞", "Journalism"), 
        (57, "–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "Investing"), (58, "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "Cooking"), (59, "–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ", "Gardening"), (60, "–Ø–∑—ã–∫–æ–≤–æ–π –æ–±–º–µ–Ω", "Language Exchange"),
    ]


PREFERENCES = {
    "ru": {
        "friendship": "ü§ù –î—Ä—É–∂–±–∞",
        "romantic": "‚ù§Ô∏è –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "partnership": "üíº –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö",
        "emigration": "üåç –û–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É —ç–º–∏–≥—Ä–∞—Ü–∏–∏"
    },
    "en": {
        "friendship": "ü§ù Friendship",
        "romantic": "‚ù§Ô∏è Romantic relationships",
        "partnership": "üíº Partnership in projects",
        "emigration": "üåç Discussion about emigration"
    }
}

GENDER = {
    "ru": {
        "fem": "üë© –ñ–µ–Ω—Å–∫–∏–π",
        "mal": "üë® –ú—É–∂—Å–∫–æ–π",
        "oth": "üåà –î—Ä—É–≥–æ–µ"
    },
    "en": {
        "fem": "üë© Female",
        "mal": "üë® Male",
        "oth": "üåà Other"
    }
}

WHO = {
    "ru":{"girls":"üë© –î–µ–≤—É—à–∫–∏",
    "boys":"üë® –ü–∞—Ä–Ω–∏",
    "all":"üåç –í—Å–µ"},
    "en":
    {
    "girls":"üë© Girls",
    "boys":"üë® Boys",
    "all":"üåç Everyone"
    }
}

ORI={
        "ru":{
                "hetero":"‚ù§Ô∏è –ì–µ—Ç–µ—Ä–æ",
                "gay":"üåà –ì–µ–π",
                "bi":"üíõ –ë–∏",
                "lesbian":"üíñ –õ–µ—Å–±–∏",
                "gay_lesbian":"üåà –ì–µ–π/–õ–µ—Å–±–∏",
                "oth":"üí´–î—Ä—É–≥–∞—è",
                "skip":"–ù–µ —É–∫–∞–∑–∞–Ω–∞"


        },
        "en":{
                "hetero":"‚ù§Ô∏è Hetero",
                "gay":"üåà Gay",
                "bi":"üíõ Bi",
                "lesbian":"üíñ Lesbian",
                "gay_lesbian":"üåà Gay/Lesbian",
                "oth":"üí´Other",
                "skip":"Not specified"
        }

}
MESSAGES = {
    "profile_not_found": {
        "ru": "<b>–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.",
        "en": "<b>Profile not found.</b>\nPlease register using the /start command."
    },
    "action_prompt": {
        "ru": "‚úèÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        "en": "‚úèÔ∏è <b>Select an action:</b>"
    },
    "edit_name": {
        "ru": "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
        "en": "Edit Name"
    },
    "edit_age": {
        "ru": "–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç",
        "en": "Edit Age"
    },
    "edit_gender": {
        "ru": "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª",
        "en": "Edit Gender"
    },
    "reset_profile": {
        "ru": "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ",
        "en": "Refill Profile"
    }
}

import ssl
import certifi
from geopy.geocoders import Nominatim

def get_location_by_coordinates(latitude, longitude):
    geolocator = Nominatim(
        user_agent="my_geopy_app",
        timeout=10,
        ssl_context=ssl.create_default_context(cafile=certifi.where())
    )
    try:
        location = geolocator.reverse((latitude, longitude), exactly_one=True)
        if location:
            address = location.raw.get('address', {})
            city = address.get('city') or address.get('town') or address.get('village') or address.get('hamlet')
            return city or location.address
        else:
            return "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {e}"
    

@router.message(Command("myprofile"))
async def my_profile_handler(message: types.Message,state: FSMContext):
    user = await User.get_or_none(user_id=message.from_user.id)

    if not user:
        lang = "ru"
        await message.answer("<b>–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    lang = user.lang if user.lang in ["ru", "en"] else "ru"
    hobbies_text = ", ".join([
        (interest[1] if lang == "ru" else interest[2])
        for interest in INTERESTS
        if str(interest[0]) in (user.hobbies or [])
    ])

    location_text = user.location or ("–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞" if lang == "ru" else "Location not provided")
    if "," in location_text:
        latitude, longitude = map(float, location_text.split(","))
        location_text = get_location_by_coordinates(latitude, longitude)

    subscription_text = (
        f"<b>{'–ü–æ–¥–ø–∏—Å–∫–∞' if lang == 'ru' else 'Subscription'}:</b> {user.subscription}\n"
    )
    if user.subscription != "Free":
        subscription_text += (
            f"<b>{'–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏' if lang == 'ru' else 'Subscription end date'}:</b> {user.subscription_end}\n"
        )

    description = (
        f"<b>{'–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å' if lang == 'ru' else 'Your profile'}:</b>\n\n"
        f"<b>{'–ò–º—è' if lang == 'ru' else 'Name'}:</b> {user.name}\n"
        f"<b>{'–í–æ–∑—Ä–∞—Å—Ç' if lang == 'ru' else 'Age'}:</b> {user.age}\n"
        f"<b>{'–ü–æ–ª' if lang == 'ru' else 'Gender'}:</b> {GENDER[lang][user.gender]}\n"
        f"<b>{'–õ–æ–∫–∞—Ü–∏—è' if lang == 'ru' else 'Location'}:</b> {location_text or ('–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞' if lang == 'ru' else 'Location not provided')}\n\n"
        f"{subscription_text}"
        f"<b>{'–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è' if lang == 'ru' else 'Orientation'}:</b> {ORI[lang][user.orientation]}\n"
        f"<b>{'–ö–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å' if lang == 'ru' else 'Viewing Preferences'}:</b> {WHO[lang][user.for_whom]}\n"
        f"<b>{'–¶–µ–ª–∏' if lang == 'ru' else 'Goals'}:</b> {PREFERENCES[lang][user.preferences]}\n"
        f"<b>{'–£–≤–ª–µ—á–µ–Ω–∏—è' if lang == 'ru' else 'Hobbies'}:</b> {hobbies_text}\n\n"
        f"_________________________\n{user.about or ''}\n"
    )



    media = user.medias or []
    if len(media) == 1:
        media_file = media[0]['file_id']
        if media[0]['type'] == 'photo':
            msg= await message.bot.send_photo(message.from_user.id, media_file, caption=description)
        elif media[0]['type'] == 'video':
            msg= await message.bot.send_video(message.from_user.id, media_file, caption=description)
    else:
        files=[]
        i =0
        for media_file in media:
            
            caption=description if i == 0 else None
            
            if media_file["type"] =="video":
                files.append(InputMediaVideo(media=f"{media_file['file_id']}", caption=caption))
                i = i+1
            elif media_file['type'] == 'photo':
                files.append(InputMediaPhoto(media=f"{media_file['file_id']}", caption=caption))
                i = i+1
            else:
                continue
                 

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
        msg= await message.bot.send_media_group(chat_id=message.from_user.id, media=files)
        data= await state.get_data()
        data["id_card_profile"]=None
        await state.update_data(data=data)
    lang = user.lang if user and user.lang in ["ru", "en"] else "ru"
    if user.localstatus == "active":
        btn_local = InlineKeyboardButton(
            text="üåç –°–∫—Ä—ã—Ç—å –ª–æ–∫–∞—Ü–∏—é" if lang == "ru" else "üåç Hide Location",
            callback_data="location_hish"
        )
    else:
        btn_local = InlineKeyboardButton(
            text="üåç –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é" if lang == "ru" else "üåç Show Location",
            callback_data="location_hish"
        )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üñã –ò–º—è" if lang == "ru" else "üñã Name",
                callback_data="fedit_name"
            ),
            InlineKeyboardButton(
                text="üéÇ –í–æ–∑—Ä–∞—Å—Ç" if lang == "ru" else "üéÇ Age",
                callback_data="fedit_age"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìç –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é" if lang == "ru" else "üìç Edit Location",
                callback_data="fedit_location"
            ),
            btn_local
        ],
        [
            InlineKeyboardButton(
                text="‚ö• –ü–æ–ª" if lang == "ru" else "‚ö• Gender",
                callback_data="fedit_gender"
            ),
            InlineKeyboardButton(
                text="üåà –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è" if lang == "ru" else "üåà Orientation",
                callback_data="fedit_orientation"
            )
        ],
        [
            InlineKeyboardButton(
                text="üëÅÔ∏è‚Äçüó®Ô∏è –ö–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å" if lang == "ru" else "üëÅÔ∏è‚Äçüó®Ô∏è Viewing Preferences",
                callback_data="fedit_pref"
            ),
            InlineKeyboardButton(
                text="üéØ –¶–µ–ª–∏" if lang == "ru" else "üéØ Goals",
                callback_data="fedit_goals"
            )
        ],
        [
            InlineKeyboardButton(
                text="üé® –£–≤–ª–µ—á–µ–Ω–∏—è" if lang == "ru" else "üé® Hobbies",
                callback_data="fedit_hobbies"
            ),
            InlineKeyboardButton(
                text="üìù –û–ø–∏—Å–∞–Ω–∏–µ" if lang == "ru" else "üìù Description",
                callback_data="fedit_descr"
            )
        ],[
    InlineKeyboardButton(
        text="üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞" if lang == "ru" else "üñºÔ∏è Edit Media",
        callback_data="fedit_media"
    )
],

        [
            InlineKeyboardButton(
                text="üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ" if lang == "ru" else "üîÑ Refill Profile",
                callback_data="reset_profile"
            )
        ]
    ])


    await message.answer(
        MESSAGES["action_prompt"][lang], 
        reply_markup=keyboard
    )
