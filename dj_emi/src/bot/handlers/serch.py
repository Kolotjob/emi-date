from aiogram import Router, types, F
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputMediaPhoto,
    InputMediaVideo,
    ReplyKeyboardRemove
)
from aiogram.fsm.context import FSMContext

import math
import ssl
import certifi
from geopy.geocoders import Nominatim
from tortoise.expressions import Q

from src.models import User as Userdb, Like, Block
from src.utils.state import SearchPeople

router = Router()

# -----------------------------
# –°–ª–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
# -----------------------------
INTERESTS = [
    (1, "–°–ø–æ—Ä—Ç", "Sport"), (2, "–ú—É–∑—ã–∫–∞", "Music"), (3, "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "Travel"), 
    (4, "–ö–∏–Ω–æ", "Movies"), (5, "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "Cooking"), (6, "–ò—Å–∫—É—Å—Å—Ç–≤–æ", "Art"), 
    (7, "–¢–∞–Ω—Ü—ã", "Dancing"), (8, "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "Technology"), (9, "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "Literature"), 
    (10, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "Photography"), (11, "–ò–≥—Ä—ã", "Games"), (12, "–ü—Ä–∏—Ä–æ–¥–∞", "Nature"), 
    (13, "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏", "Cars"), (14, "–ú–æ–¥–∞", "Fashion"), (15, "–ó–¥–æ—Ä–æ–≤—å–µ", "Health"),
    (16, "–ô–æ–≥–∞", "Yoga"), (17, "–§–∏—Ç–Ω–µ—Å", "Fitness"), (18, "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "Astronomy"), 
    (19, "–ò—Å—Ç–æ—Ä–∏—è", "History"), (20, "–ù–∞—É–∫–∞", "Science"), (21, "–¢–µ–∞—Ç—Ä", "Theater"), 
    (22, "–í–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂", "Video Editing"), (23, "–†—ã–±–∞–ª–∫–∞", "Fishing"), (24, "–û—Ö–æ—Ç–∞", "Hunting"), 
    (25, "–ì–∞–¥–∂–µ—Ç—ã", "Gadgets"), (26, "–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç", "Esports"), (27, "–ö–æ–º–∏–∫—Å—ã", "Comics"), 
    (28, "–†—É–∫–æ–¥–µ–ª–∏–µ", "Handcraft"), (29, "–ú–µ–¥–∏—Ü–∏–Ω–∞", "Medicine"), (30, "–ñ–∏–≤–æ—Ç–Ω—ã–µ", "Animals"),
    (31, "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è", "Astrology"), (32, "–≠–∑–æ—Ç–µ—Ä–∏–∫–∞", "Esoterics"), (33, "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", "Psychology"), 
    (34, "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "Planning"), (35, "–í–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ", "Volunteering"), (36, "–ë–ª–æ–≥–∏–Ω–≥", "Blogging"), 
    (37, "–î–∏–∑–∞–π–Ω", "Design"), (38, "–§–ª–æ—Ä–∏—Å—Ç–∏–∫–∞", "Floristry"), (39, "–ö–æ—Å–ø–ª–µ–π", "Cosplay"), 
    (40, "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "Programming"), (41, "–ú–æ—Ç–æ—Å–ø–æ—Ä—Ç", "Motor Sports"), 
    (42, "–§–∏–ª–æ—Å–æ—Ñ–∏—è", "Philosophy"), (43, "–ß—Ç–µ–Ω–∏–µ", "Reading"), (44, "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "Collecting"),
    (45, "–õ—ã–∂–∏", "Skiing"), (46, "–°–Ω–æ—É–±–æ—Ä–¥", "Snowboarding"), (47, "–î–∞–π–≤–∏–Ω–≥", "Diving"), 
    (48, "–ö–µ–º–ø–∏–Ω–≥", "Camping"), (49, "–ü–ª–∞–≤–∞–Ω–∏–µ", "Swimming"), (50, "–ë–µ–≥", "Running"), 
    (51, "–¢—É—Ä–∏–∑–º", "Hiking"), (52, "–°—Ç—Ä–µ–ª—å–±–∞", "Shooting"), (53, "–ì–æ–ª—å—Ñ", "Golf"), 
    (54, "–®–∞—Ö–º–∞—Ç—ã", "Chess"), (55, "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã", "Board Games"), (56, "–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞", "Journalism"), 
    (57, "–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "Investing"), (58, "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "Cooking"), (59, "–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ", "Gardening"), 
    (60, "–Ø–∑—ã–∫–æ–≤–æ–π –æ–±–º–µ–Ω", "Language Exchange"),
]

PREFERENCES = {
    "ru": {
        "friendship": "ü§ù –î—Ä—É–∂–±–∞",
        "romantic": "‚ù§Ô∏è –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "partnership": "üíº –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö",
        "emigration": "üåç –û–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É —ç–º–∏–≥—Ä–∞—Ü–∏–∏"
    },
    "en": {
        "friendship": "ü§ù Friendship",
        "romantic": "‚ù§Ô∏è Romantic relationships",
        "partnership": "üíº Partnership in projects",
        "emigration": "üåç Discussion about emigration"
    }
}

GENDER = {
    "ru": {"fem": "üë© –ñ–µ–Ω—Å–∫–∏–π", "mal": "üë® –ú—É–∂—Å–∫–æ–π", "oth": "üåà –î—Ä—É–≥–æ–µ"},
    "en": {"fem": "üë© Female", "mal": "üë® Male", "oth": "üåà Other"}
}

WHO = {
    "ru": {"fem": "üë© –î–µ–≤—É—à–∫–∏", "mal": "üë® –ü–∞—Ä–Ω–∏", "all": "üåç –í—Å–µ"},
    "en": {"fem": "üë© fem", "mal": "üë® mal", "all": "üåç Everyone"}
}

ORI = {
    "ru": {
        "hetero": "‚ù§Ô∏è –ì–µ—Ç–µ—Ä–æ",
        "gay": "üåà –ì–µ–π",
        "bi": "üíõ –ë–∏",
        "lesbian": "üíñ –õ–µ—Å–±–∏",
        "gay_lesbian": "üåà –ì–µ–π/–õ–µ—Å–±–∏",
        "oth": "üí´ –î—Ä—É–≥–∞—è",
        "skip": "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    },
    "en": {
        "hetero": "‚ù§Ô∏è Hetero",
        "gay": "üåà Gay",
        "bi": "üíõ Bi",
        "lesbian": "üíñ Lesbian",
        "gay_lesbian": "üåà Gay/Lesbian",
        "oth": "üí´ Other",
        "skip": "Not specified"
    }
}

# -----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------
@router.message(F.text.in_(["‚ù§Ô∏è –õ–∞–π–∫", "üíñ –°—É–ø–µ—Ä–ª–∞–π–∫", "üëéüèª –î–∏–∑–ª–∞–π–∫", "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "‚ùó –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫",
                             "‚ù§Ô∏è Like", "üíñ Superlike", "üëéüèª Dislike", "üö´ Block", "‚ùó Report", "‚èπ Stop Search"]))
async def handle_reaction(message: types.Message, state: FSMContext):
    user = await Userdb.get_or_none(user_id=message.from_user.id)
    if not user:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    reaction = message.text
    if reaction in ["‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫", "‚èπ Stop Search"]:
        await state.clear()
        await message.answer("–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=ReplyKeyboardRemove())
        return

    data = await state.get_data()
    current_candidate_id = data.get("current_candidate_id")
    if not current_candidate_id:
        await message.answer("–ù–µ—Ç —Ç–µ–∫—É—â–µ–π –∞–Ω–∫–µ—Ç—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
        return

    candidate = await Userdb.get_or_none(user_id=current_candidate_id)
    if not candidate:
        await message.answer("–û—à–∏–±–∫–∞: –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if reaction in ["‚ù§Ô∏è –õ–∞–π–∫", "‚ù§Ô∏è Like"]:
        await Like.create(from_user=user, to_user=candidate, is_superlike=False)
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Free-–ø–æ–¥–ø–∏—Å–∫–∞, —É–≤–µ–¥–æ–º–ª—è–µ–º, —á—Ç–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.
        if user.subscription.lower() == "free":
            await message.answer("–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ª–∞–π–∫! –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É.")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
        else:
            await message.answer("–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫!")
    elif reaction in ["üíñ –°—É–ø–µ—Ä–ª–∞–π–∫", "üíñ Superlike"]:
        if user.subscription.lower() != "free":
            await Like.create(from_user=user, to_user=candidate, is_superlike=True)
            await message.answer("–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Å—É–ø–µ—Ä–ª–∞–π–∫!")
        else:
            await message.answer("–°—É–ø–µ—Ä–ª–∞–π–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ.")
    elif reaction in ["üëéüèª –î–∏–∑–ª–∞–π–∫", "üëéüèª Dislike"]:
        await message.answer("–í—ã –¥–∏–∑–ª–∞–π–∫–Ω—É–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.")
    elif reaction in ["üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "üö´ Block"]:
        await Block.create(from_user=user, to_user=candidate, can_message=False)
        await message.answer("–ö–∞–Ω–¥–∏–¥–∞—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    elif reaction in ["‚ùó –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", "‚ùó Report"]:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–±—ã.
        await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∂–∞–ª–æ–±—É.")
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏, –µ—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏—è –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–æ–∏—Å–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
    await start_search(user, state, message.bot)

# -----------------------------
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"
# -----------------------------
@router.message(F.text.in_(["üöÄ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", "üöÄ Start Search"]))
async def handle_search_start(message: types.Message, state: FSMContext):
    user = await Userdb.get_or_none(user_id=message.from_user.id)
    if not user:
        await message.answer(
            "<b>–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start."
        )
        return

    lang = user.lang or ("ru" if message.from_user.language_code == "ru" else "en")
    await state.set_state(SearchPeople.search)
    await message.answer(
        "üîé –ü–æ–∏—Å–∫ –Ω–∞—á–∞–ª—Å—è! –û–∂–∏–¥–∞–π—Ç–µ‚Ä¶" if lang == "ru" else "üîé The search has begun! Please wait‚Ä¶"
    )
    await start_search(user, state, message.bot)
