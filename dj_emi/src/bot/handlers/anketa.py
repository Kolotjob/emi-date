from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from src.models import User
from aiogram.types import Message
from typing import Callable, Awaitable, Dict, Any, List
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext, BaseStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from src.utils.state import RegState
from src.utils.add_profile import add_profile
from aiogram.types import ContentType


router = Router()
BAD_WORDS = [
    # –ù–∞—Ä–∫–æ—Ç–∏–∫–∏
    "–Ω–∞—Ä–∫–æ—Ç–∏–∫", "–Ω–∞—Ä–∫–æ—Ç–∞", "–∫–æ—Å—è–∫", "—Ç—Ä–∞–≤–∫–∞", "–≥–∞—à–∏—à", "–≥–µ—Ä–æ–∏–Ω", "–∫–æ–∫–∞–∏–Ω", "–∞–º—Ñ–µ—Ç–∞–º–∏–Ω", "—ç–∫—Å—Ç–∞–∑–∏",
    "–º–∞—Ä–∏—Ö—É–∞–Ω–∞", "—Å–ø–∞–π—Å", "–ª—Å–¥", "—à–∏—à–∫–∏", "–æ–ø–∏—É–º", "–ø–ª–∞–Ω", "–∫—Ä–∏—Å—Ç–∞–ª–ª", "–º–µ—Ñ–µ–¥—Ä–æ–Ω", "drugs", "drug",
    "weed", "marijuana", "cocaine", "heroin", "ecstasy", "meth", "amphetamine", "hash", "spice",
    "lsd", "crystal", "meph", "opium", "j0int", "dr@g", "tr@vka",

    # CP
    "–¥–µ—Ç—Å–∫–∞—è –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è", "–¥–µ—Ç—Å–∫–æ–µ –ø–æ—Ä–Ω–æ", "–∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ", "–Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç", "–ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è —Å –¥–µ—Ç—å–º–∏",
    "cp", "child porn", "child pornography", "illegal content", "b@nned video", "ch!ld p0rn",

    # –û—Ä—É–∂–∏–µ
    "–æ—Ä—É–∂–∏–µ", "–ø–∏—Å—Ç–æ–ª–µ—Ç", "–≤–∏–Ω—Ç–æ–≤–∫–∞", "–∞–≤—Ç–æ–º–∞—Ç", "–ø—É–ª–µ–º–µ—Ç", "–≥—Ä–∞–Ω–∞—Ç–∞", "–º–∏–Ω–∞", "–±–æ–º–±–∞", "–∞—Ä—Å–µ–Ω–∞–ª",
    "—Ä—É–∂—å–µ", "—Å—Ç–≤–æ–ª", "–∫–∞–ª–∞—à–Ω–∏–∫–æ–≤", "–∞–∫-47", "–≥–ª–æ–∫", "–≥—Ä–∞–Ω–∞—Ç–æ–º–µ—Ç", "weapon", "gun", "pistol", "rifle",
    "machine gun", "grenade", "bomb", "landmine", "arsenal", "shotgun", "kalashnikov", "ak47",
    "glock", "rocket launcher", "we@pon", "glock-19", "b0mb",

    # Additional prohibited words
    "explosive", "tnt", "c4", "detonator", "silencer", "sniper", "assault rifle", "pipe bomb",
    "–Ω–∞—Ä–∫–æ—Ç", "–≥–µ—Ä–∏—á", "–≥–µ—Ä—ã—á", "–¥–æ–∑–∞", "—Å–ø–∞–π—Å—ã", "—Å–æ–ª–∏", "—Ñ–µ–Ω", "—Å–∫–æ—Ä–æ—Å—Ç—å",
    "–∑–∞–ø—Ä–µ—â–µ–Ω–∫–∞", "–ø–æ—Ä–Ω–æ —Å –¥–µ—Ç—å–º–∏", "–ø–æ—Ä–µ–≤–æ", "kill", "murder", "mass shooting", "terrorist", "attack"
]






# ++++++++++++++++ NAME +++++++++++++++

@router.message(RegState.name)
async def set_name(message: types.Message, state: FSMContext, lang: str):
    user = await User.get_or_none(user_id=message.from_user.id)
    global BAD_WORDS
    if user:
        
        if message.text not in BAD_WORDS:
            user.name = message.text.strip()
            await user.save()
            if user.gender is None:
                
                if lang == "ru":
                    txt = """<b>–ò–º—è —É–∫–∞–∑–∞–Ω–æ! ‚úÖ</b>
    –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª! üåü

    ‚û°Ô∏è –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
    """
                else:
                    txt = """<b>Name provided! ‚úÖ</b>
    Great, now specify your gender! üåü

    ‚û°Ô∏è Choose one of the options:
    """

                inline_keyboard = [
                    [InlineKeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π" if lang == "ru" else "üë© Female", callback_data="gender_fem")],
                    [InlineKeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π" if lang == "ru" else "üë® Male", callback_data="gender_mal")],
                    [InlineKeyboardButton(text="üåà –î—Ä—É–≥–æ–µ" if lang == "ru" else "üåà Other", callback_data="gender_oth")]
                ]

                keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
                await state.set_state(RegState.gender)
                await message.answer(txt, reply_markup=keyboard)
            else:
                txt="–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å." if lang == "ru" else "Saved ‚úÖ\nClick /start to continue."                
                await state.set_state(state=None)

                
                if not all([
                        user.name,
                        user.age,
                        user.gender,
                        user.orientation,
                        user.for_whom,
                        user.preferences,
                        user.location,
                        user.about,
                        user.hobbies,
                        user.medias]):
                    await add_profile(message=message, state=state , user=user, lang=lang)
                else:
                    await message.answer(txt)

        else:
            txt = """<‚ùå <b>–û—à–∏–±–∫–∞:</b> –í–∞—à–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è. ‚úçÔ∏è""" if lang == "ru" else """<‚ùå <b>Error:</b> Your name contains prohibited words. Please choose another name. ‚úçÔ∏è"""
            await state.set_state(RegState.name)
            await message.answer(txt)
        
# ++++++++++++++++ GENDER +++++++++++++++

@router.callback_query(lambda c: c.data.startswith("gender_"), RegState.gender)
async def set_gender(callback_query: CallbackQuery, user: User, state: FSMContext, lang: str):
    if user:
        user.gender = callback_query.data.split("_")[1]
        await user.save()
        if user.orientation is None:
            if lang == "ru":
                txt = """<b>–ü–æ–ª —É–∫–∞–∑–∞–Ω! ‚úÖ</b>
    –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é! üåü

    ‚û°Ô∏è –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
    """
            else:
                txt = """<b>Gender saved! ‚úÖ</b>
    Now specify your orientation! üåü

    ‚û°Ô∏è Choose one of the options:
    """
            if user.gender =='mal':

                inline_keyboard = [
                    [InlineKeyboardButton(text="‚ù§Ô∏è –ì–µ—Ç–µ—Ä–æ" if lang == "ru" else "‚ù§Ô∏è Hetero", callback_data="orientation_hetero")],
                    [InlineKeyboardButton(text="üåà –ì–µ–π" if lang == "ru" else "üåà Gay", callback_data="orientation_gay")],
                    [InlineKeyboardButton(text="üíõ –ë–∏" if lang == "ru" else "üíõ Bi", callback_data="orientation_bi")]
                ]
            elif user.gender =="fem":
                inline_keyboard = [
                    [InlineKeyboardButton(text="‚ù§Ô∏è –ì–µ—Ç–µ—Ä–æ" if lang == "ru" else "‚ù§Ô∏è Hetero", callback_data="orientation_hetero")],
                    [InlineKeyboardButton(text="üíñ –õ–µ—Å–±–∏" if lang == "ru" else "üíñ Lesbian", callback_data="orientation_lesbian")],
                    [InlineKeyboardButton(text="üíõ –ë–∏" if lang == "ru" else "üíõ Bi", callback_data="orientation_bi")]
                ]
            elif user.gender=="oth":
                inline_keyboard = [
                    [InlineKeyboardButton(text="‚ù§Ô∏è –ì–µ—Ç–µ—Ä–æ" if lang == "ru" else "‚ù§Ô∏è Hetero", callback_data="orientation_hetero")],
                    [InlineKeyboardButton(text="üåà –ì–µ–π/–õ–µ—Å–±–∏" if lang == "ru" else "üåà Gay/Lesbian", callback_data="orientation_gay_lesbian")],
                    [InlineKeyboardButton(text="üíõ –ë–∏" if lang == "ru" else "üíõ Bi", callback_data="orientation_bi")]
                ]

            inline_keyboard.append([InlineKeyboardButton(text="üí´–î—Ä—É–≥–∞—è" if lang == "ru" else "üí´Other", callback_data="orientation_oth")])
            inline_keyboard.append([InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è" if lang == "ru" else "Skip ‚û°Ô∏è", callback_data="orientation_skip")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
            await state.set_state(RegState.orientation)
            await callback_query.message.edit_text(txt, reply_markup=keyboard)
        else:
            txt="–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å." if lang == "ru" else "Saved ‚úÖ\nClick /start to continue."                
            await state.set_state(state=None)

            
            if not all([
                        user.name,
                        user.age,
                        user.gender,
                        user.orientation,
                        user.for_whom,
                        user.preferences,
                        user.location,
                        user.about,
                        user.hobbies,
                        user.medias]):
                    await add_profile(message=callback_query.message, state=state , user=user, lang=lang)
            else:
                await callback_query.message.edit_text(txt, reply_markup=None)
# ++++++++++++++++ ORIENTATION +++++++++++++++

@router.callback_query(lambda c: c.data.startswith("orientation_"), RegState.orientation)
async def set_orientation(callback_query: CallbackQuery, user: User, state: FSMContext, lang: str):
    if user:
        user.orientation = callback_query.data.split("_")[1]
        await user.save()
        if user.for_whom is None:
            if lang == "ru":
                txt = """<b>–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —É–∫–∞–∑–∞–Ω–∞! ‚úÖ</b>
    –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏, –∫–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å! üåü

    ‚û°Ô∏è –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
    """
            else:
                txt = """<b>Orientation saved! ‚úÖ</b>
    Now specify who you want to see! üåü

    ‚û°Ô∏è Choose one of the options:
    """

            inline_keyboard = [
                [InlineKeyboardButton(text="üë© –î–µ–≤—É—à–∫–∏" if lang == "ru" else "üë© Girls", callback_data="show_fem")],
                [InlineKeyboardButton(text="üë® –ü–∞—Ä–Ω–∏" if lang == "ru" else "üë® Boys", callback_data="show_mal")],
                [InlineKeyboardButton(text="üåç –í—Å–µ" if lang == "ru" else "üåç Everyone", callback_data="show_all")]
            ]

            keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
            await state.set_state(RegState.show)
            await callback_query.message.edit_text(txt, reply_markup=keyboard)
        else:
            txt="–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å." if lang == "ru" else "Saved ‚úÖ\nClick /start to continue."                
            await state.set_state(state=None)

            
            if not all([
                        user.name,
                        user.age,
                        user.gender,
                        user.orientation,
                        user.for_whom,
                        user.preferences,
                        user.location,
                        user.about,
                        user.hobbies,
                        user.medias]):
                    await add_profile(message=callback_query.message, state=state , user=user, lang=lang)
            else:
                await callback_query.message.edit_text(txt, reply_markup=None)

# ++++++++++++++++ SHOW PREFERENCES +++++++++++++++

@router.callback_query(lambda c: c.data.startswith("show_"), RegState.show)
async def set_show_preferences(callback_query: CallbackQuery, user: User, state: FSMContext, lang: str):
    if user:
        user.for_whom = callback_query.data.split("_")[1]
        await user.save()
        if user.age is None:
            if lang == "ru":
                txt = """<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–∫–∞–∑–∞–Ω—ã! ‚úÖ</b>
    –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç! üåü

    ‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–º–∏–Ω–∏–º—É–º 16 –ª–µ—Ç):
    """
            else:
                txt = """<b>Viewing preferences saved! ‚úÖ</b>
    Now specify your age! üåü

    ‚û°Ô∏è Enter your age (minimum 16 years):
    """

            await state.set_state(RegState.age)
            await callback_query.message.edit_text(txt)
        else:
            txt="–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å." if lang == "ru" else "Saved ‚úÖ\nClick /start to continue."                
            await state.set_state(state=None)

            
            if not all([
                        user.name,
                        user.age,
                        user.gender,
                        user.orientation,
                        user.for_whom,
                        user.preferences,
                        user.location,
                        user.about,
                        user.hobbies,
                        user.medias]):
                    await add_profile(message=callback_query.message, state=state , user=user, lang=lang)
            else:
                await callback_query.message.edit_text(txt, reply_markup=None)

# ++++++++++++++++ AGE +++++++++++++++

@router.message(RegState.age)
async def set_age(message: types.Message, user: User, state: FSMContext, lang: str):
    if user:
        if message.text.isdigit():
            age = int(message.text)
            if age >= 16:
                user.age = age
                await user.save()
                if user.preferences is None:
                    if lang == "ru":
                        txt = """<b>–í–æ–∑—Ä–∞—Å—Ç —É–∫–∞–∑–∞–Ω! ‚úÖ</b>
    –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–∏ —Ü–µ–ª–∏! üåü

    ‚û°Ô∏è –í—ã–±–µ—Ä–∏ —Ü–µ–ª–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
    """
                    else:
                        txt = """<b>Age saved! ‚úÖ</b>
    Now specify your goals! üåü

    ‚û°Ô∏è Choose your goals from the options provided:
    """
                    inline_keyboard=[]
                    if lang =="ru":
                        inline_keyboard.append([InlineKeyboardButton(text="ü§ù –î—Ä—É–∂–±–∞", callback_data="interest_friendship")])
                        inline_keyboard.append([InlineKeyboardButton(text="‚ù§Ô∏è –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="interest_romantic")])
                        inline_keyboard.append([InlineKeyboardButton(text="üíº –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö", callback_data="interest_partnership")])
                        inline_keyboard.append([InlineKeyboardButton(text="üåç –û–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É —ç–º–∏–≥—Ä–∞—Ü–∏–∏", callback_data="interest_emigration")])
                    else:
                        inline_keyboard.append([InlineKeyboardButton(text="ü§ù Friendship", callback_data="interest_friendship")])
                        inline_keyboard.append([InlineKeyboardButton(text="‚ù§Ô∏è Romantic relationships", callback_data="interest_romantic")])
                        inline_keyboard.append([InlineKeyboardButton(text="üíº Partnership in projects", callback_data="interest_partnership")])
                        inline_keyboard.append([InlineKeyboardButton(text="üåç Discussion about emigration", callback_data="interest_emigration")])


                    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
                    await state.set_state(RegState.preferences)
                    await message.answer(txt, reply_markup=keyboard)
                else:
                    txt="–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å." if lang == "ru" else "Saved ‚úÖ\nClick /start to continue."                
                    await state.set_state(state=None)

                    if not all([
                        user.name,
                        user.age,
                        user.gender,
                        user.orientation,
                        user.for_whom,
                        user.preferences,
                        user.location,
                        user.about,
                        user.hobbies,
                        user.medias]):
                        await add_profile(message=message, state=state , user=user, lang=lang)
                    else:
                        await message.answer(txt)
            else:
                txt = """‚ùå <b>–û—à–∏–±–∫–∞:</b> –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 16 –ª–µ—Ç. üî¢""" if lang == "ru" else """‚ùå <b>Error:</b> Age must be at least 16 years. üî¢"""
                await message.answer(txt)
        else:
            txt = """‚ùå <b>–û—à–∏–±–∫–∞:</b> –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. üî¢""" if lang == "ru" else """‚ùå <b>Error:</b> Age must be a number. Please enter a valid value. üî¢"""
            await message.answer(txt)


# ++++++++++++++++ PREFERENCES +++++++++++++++

@router.callback_query(lambda c: "interest_" in c.data, RegState.preferences)
async def callback_handler(callback_query: CallbackQuery, user: User, state: FSMContext, lang: str):
    
    if user:
        pref = callback_query.data.split("_")[1]
        user.preferences=pref
        await user.save()
        if user.location is None:
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[ KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é" if lang == "ru" else "üìç Share Location",request_location=True)]],resize_keyboard=True,one_time_keyboard=True)

            if lang == "ru":
                txt = """<b>–¶–µ–ª–∏ –ø–æ–∏—Å–∫–∞ —É–∫–∞–∑–∞–Ω—ã! ‚úÖ</b>
    –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ª—é–¥–µ–π —Ä—è–¥–æ–º. üåç

    ‚ö†Ô∏è <b>–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ:</b> –Ω–∏–∫—Ç–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —É–∑–Ω–∞–µ—Ç –≤–∞—à–µ —Ä–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –û–Ω–∏ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ <b>–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ</b> –¥–æ –≤–∞—Å. üõ°Ô∏è

    üí° <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b> –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. 
    –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –µ—ë –≤ –º–µ–Ω—é Telegram. –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–º–µ–Ω–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–∞—à–µ–º <a href="https://t.me/your_channel_post">–∫–∞–Ω–∞–ª–µ</a>. üìç

    ‚û°Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ.
    """
            else:
                txt = """<b>Search goals saved! ‚úÖ</b>
    Great, now we need your location to suggest people nearby. üåç

    ‚ö†Ô∏è <b>Don't worry:</b> no one will see your exact location. Users will only see the <b>approximate distance</b> to you. üõ°Ô∏è

    üí° <b>Note:</b> You can send your current location by pressing the button below. 
    If you‚Äôd like to specify another point on the map, select it in the Telegram menu. Detailed instructions for changing the location are available in our <a href="https://t.me/your_channel_post">channel</a>. üìç

    ‚û°Ô∏è Please press the button below to share your location or choose a point on the map.
    """

            await state.set_state(RegState.location)
            await callback_query.bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            msg= await callback_query.bot.send_message(callback_query.from_user.id, txt, reply_markup=keyboard)
            data = await state.get_data()
            data['idmsg_local']=msg.message_id
            await state.update_data(data)
        else:
            txt="–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å." if lang == "ru" else "Saved ‚úÖ\nClick /start to continue."                
            await state.set_state(state=None)

            
            if not all([
                        user.name,
                        user.age,
                        user.gender,
                        user.orientation,
                        user.for_whom,
                        user.preferences,
                        user.location,
                        user.about,
                        user.hobbies,
                        user.medias]):
                    await add_profile(message=callback_query.message, state=state , user=user, lang=lang)
            else:
                await callback_query.message.edit_text(txt, reply_markup=None)

# ++++++++++++++++ LOCATION +++++++++++++++

@router.message(RegState.location, lambda message: message.content_type == ContentType.LOCATION)
async def set_location(message: types.Message, user: User, state: FSMContext, lang: str):
    
    if user:
        print(f"\n\n\n\n\n\n\n\n\n\n\n\n\n\n{message.location}\n\n\n\n\n\n\n\n\n\n\n\n{message.location.model_config}")
        user.location = f"{message.location.latitude},{message.location.longitude}"
        await user.save()
        if user.about is None:
            if lang == "ru":
                txt = """<b>–õ–æ–∫–∞—Ü–∏—è —É–∫–∞–∑–∞–Ω–∞! ‚úÖ</b>
    –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ. üåü

    ‚û°Ô∏è –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ: —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —Ö–æ–±–±–∏ –∏–ª–∏ —á—Ç–æ-—Ç–æ, —á—Ç–æ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∑–Ω–∞–ª–∏ –æ —Ç–µ–±–µ.
    """
            else:
                txt = """<b>Location saved! ‚úÖ</b>
    Great, now tell us a bit about yourself. üåü

    ‚û°Ô∏è Write a short description about yourself: your interests, hobbies, or anything you‚Äôd like others to know about you.
    """
            await state.set_state(RegState.about)
            data = await state.get_data()
            if "idmsg_local" in data: 
                await message.bot.delete_message(message.from_user.id, data["idmsg_local"])
            data["idmsg_local"]=''
            await state.update_data(data)
            await message.bot.delete_message(message.from_user.id, message.message_id)
            await message.bot.send_message(message.from_user.id, txt)
        else:
            txt="–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å." if lang == "ru" else "Saved ‚úÖ\nClick /start to continue."                
            await state.set_state(state=None)

            
            if not all([
                        user.name,
                        user.age,
                        user.gender,
                        user.orientation,
                        user.for_whom,
                        user.preferences,
                        user.location,
                        user.about,
                        user.hobbies,
                        user.medias]):
                    await add_profile(message=message, state=state , user=user, lang=lang)
            else:
                await message.answer(txt)
# ++++++++++++++++ ABOUT +++++++++++++++

@router.message(RegState.about)
async def set_about(message: types.Message, user: User, state: FSMContext, lang: str):
    global BAD_WORDS
    if user:
        if message.text:
            if message.text not in BAD_WORDS:
                user.about = message.text
                await user.save()
                if user.hobbies is None:
                
                    await state.set_state(RegState.hobbies)
                # –£–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö —Å –Ω–æ–º–µ—Ä–∞–º–∏
                    interests = [
                        (1, "–°–ø–æ—Ä—Ç", "Sport"), (2, "–ú—É–∑—ã–∫–∞", "Music"), (3, "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "Travel"), 
                        (4, "–ö–∏–Ω–æ", "Movies"), (5, "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "Cooking"), (6, "–ò—Å–∫—É—Å—Å—Ç–≤–æ", "Art"), 
                        (7, "–¢–∞–Ω—Ü—ã", "Dancing"), (8, "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "Technology"), (9, "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "Literature"), 
                        (10, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "Photography"), (11, "–ò–≥—Ä—ã", "Games"), (12, "–ü—Ä–∏—Ä–æ–¥–∞", "Nature"), 
                        (13, "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏", "Cars"), (14, "–ú–æ–¥–∞", "Fashion"), (15, "–ó–¥–æ—Ä–æ–≤—å–µ", "Health")
                    ]
                    inlinekeyboard = []
                    row = []

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–≤–ª–µ—á–µ–Ω–∏–π, –ø–æ 3 –≤ —Ä—è–¥
                    for i, (number, interest_ru, interest_en) in enumerate(interests[:10], start=1):
                        row.append(InlineKeyboardButton(
                            text=interest_ru if lang == "ru" else interest_en,
                            callback_data=f"intrs_{number}"
                        ))
                        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ 3 –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
                        if len(row) == 2 or i == len(interests[:10]):
                            inlinekeyboard.append(row)
                            row = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä—è–¥–∞

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
                    inlinekeyboard.append([
                        InlineKeyboardButton(text="üö´" if lang == "ru" else "üö´", callback_data="intrs_z"),
                        InlineKeyboardButton(text="‚û°Ô∏è" if lang == "ru" else "‚û°Ô∏è Next", callback_data="intrs_page_next")
                    ])

                    keyboard = InlineKeyboardMarkup(inline_keyboard=inlinekeyboard)
                    
                    if lang == "ru":
                        txt = """<b>–ó–∞–ø–∏—Å–∞–ª–∏ ‚úÖ</b>
    –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–æ 5 —É–≤–ª–µ—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç —Ç–µ–±—è. üåü

    ‚û°Ô∏è –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É–≤–ª–µ—á–µ–Ω–∏—è. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–∂–º–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å‚úÖ".
        """
                    else:
                        txt = """<b>Saved ‚úÖ</b>
    Great, now select up to 5 hobbies that describe you. üåü\n\n‚û°Ô∏è Click on the buttons to select your hobbies. Once you're done, click \"<b>Save‚úÖ</b>\".
    """


                    await message.answer(txt, reply_markup=keyboard)
                else:
                    txt="–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å." if lang == "ru" else "Saved ‚úÖ\nClick /start to continue."
                    await state.set_state(state=None)

                    
                    if not all([
                        user.name,
                        user.age,
                        user.gender,
                        user.orientation,
                        user.for_whom,
                        user.preferences,
                        user.location,
                        user.about,
                        user.hobbies,
                        user.medias]):
                        await add_profile(message=message, state=state , user=user, lang=lang)
                    else:
                        await message.answer(txt)
            else:
                if lang == "ru":
                    txt = """‚ùå <b>–û—à–∏–±–∫–∞:</b> –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚úçÔ∏è"""
                else:
                    txt = """‚ùå <b>Error:</b> The description contains prohibited words. Please enter another description and try again. ‚úçÔ∏è"""
                await message.answer(txt)
                await state.set_state(RegState.about)
        else:
                if lang == "ru":
                    txt = """‚ùå <b>–û—à–∏–±–∫–∞:</b> –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–¥–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç ‚úçÔ∏è"""
                else:
                    
                    txt = """‚ùå <b>Error:</b> The description must contain text. Please write something ‚úçÔ∏è"""
                await message.answer(txt)
                await state.set_state(RegState.about)

# ++++++++++++++++ HOBBIES +++++++++++++++

@router.callback_query(lambda c: "intrs_" in c.data or c.data.startswith("intrs_page") or c.data == "intrs_done", RegState.hobbies)
async def callback_handler(callback_query: CallbackQuery, user: User, state: FSMContext, lang: str):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    interests = [
        (1, "–°–ø–æ—Ä—Ç", "Sport"), (2, "–ú—É–∑—ã–∫–∞", "Music"), (3, "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "Travel"), 
        (4, "–ö–∏–Ω–æ", "Movies"), (5, "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "Cooking"), (6, "–ò—Å–∫—É—Å—Å—Ç–≤–æ", "Art"), 
        (7, "–¢–∞–Ω—Ü—ã", "Dancing"), (8, "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "Technology"), (9, "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "Literature"), 
        (10, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "Photography"), (11, "–ò–≥—Ä—ã", "Games"), (12, "–ü—Ä–∏—Ä–æ–¥–∞", "Nature"), 
        (13, "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏", "Cars"), (14, "–ú–æ–¥–∞", "Fashion"), (15, "–ó–¥–æ—Ä–æ–≤—å–µ", "Health"),
        (16, "–ô–æ–≥–∞", "Yoga"), (17, "–§–∏—Ç–Ω–µ—Å", "Fitness"), (18, "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "Astronomy"), 
        (19, "–ò—Å—Ç–æ—Ä–∏—è", "History"), (20, "–ù–∞—É–∫–∞", "Science"), (21, "–¢–µ–∞—Ç—Ä", "Theater"), 
        (22, "–í–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂", "Video Editing"), (23, "–†—ã–±–∞–ª–∫–∞", "Fishing"), (24, "–û—Ö–æ—Ç–∞", "Hunting"), 
        (25, "–ì–∞–¥–∂–µ—Ç—ã", "Gadgets"), (26, "–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç", "Esports"), (27, "–ö–æ–º–∏–∫—Å—ã", "Comics"), 
        (28, "–†—É–∫–æ–¥–µ–ª–∏–µ", "Handcraft"), (29, "–ú–µ–¥–∏—Ü–∏–Ω–∞", "Medicine"), (30, "–ñ–∏–≤–æ—Ç–Ω—ã–µ", "Animals"),
        (31, "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è", "Astrology"), (32, "–≠–∑–æ—Ç–µ—Ä–∏–∫–∞", "Esoterics"), (33, "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", "Psychology"), 
        (34, "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "Planning"), (35, "–í–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ", "Volunteering"), (36, "–ë–ª–æ–≥–∏–Ω–≥", "Blogging"), 
        (37, "–î–∏–∑–∞–π–Ω", "Design"), (38, "–§–ª–æ—Ä–∏—Å—Ç–∏–∫–∞", "Floristry"), (39, "–ö–æ—Å–ø–ª–µ–π", "Cosplay"), 
        (40, "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "Programming"), (41, "–ú–æ—Ç–æ—Å–ø–æ—Ä—Ç", "Motor Sports"), 
        (42, "–§–∏–ª–æ—Å–æ—Ñ–∏—è", "Philosophy"), (43, "–ß—Ç–µ–Ω–∏–µ", "Reading"), (44, "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "Collecting"),
        (45, "–õ—ã–∂–∏", "Skiing"), (46, "–°–Ω–æ—É–±–æ—Ä–¥", "Snowboarding"), (47, "–î–∞–π–≤–∏–Ω–≥", "Diving"), 
        (48, "–ö–µ–º–ø–∏–Ω–≥", "Camping"), (49, "–ü–ª–∞–≤–∞–Ω–∏–µ", "Swimming"), (50, "–ë–µ–≥", "Running"), 
        (51, "–¢—É—Ä–∏–∑–º", "Hiking"), (52, "–°—Ç—Ä–µ–ª—å–±–∞", "Shooting"), (53, "–ì–æ–ª—å—Ñ", "Golf"), 
        (54, "–®–∞—Ö–º–∞—Ç—ã", "Chess"), (55, "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã", "Board Games"), (56, "–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞", "Journalism"), 
        (57, "–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "Investing"), (58, "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "Cooking"), (59, "–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ", "Gardening"), (60, "–Ø–∑—ã–∫–æ–≤–æ–π –æ–±–º–µ–Ω", "Language Exchange"),
    ]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    state_data = await state.get_data()
    current_page = state_data.get("current_page", 1)
    hobbies = state_data.get("selected_hobbies", [])

    if callback_query.data.startswith("intrs_page"):
        if "next" in callback_query.data:
            current_page += 1
        elif "back" in callback_query.data:
            current_page -= 1
        await state.update_data(current_page=current_page)

    elif callback_query.data.startswith("intrs_") and callback_query.data != "intrs_done":
        interest = callback_query.data.split("_")[1]
        if interest in hobbies:
            hobbies.remove(interest)
        else:
            if len(hobbies) < 5:
                hobbies.append(interest)
            else:
                txt1 = "–í—ã–±—Ä–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ! –£–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'." if lang == "ru" else "Maximum number selected! Remove one interest or click 'Save'."
                await callback_query.answer(
                    txt1,
                    show_alert=True
                )
                return
        await state.update_data(selected_hobbies=hobbies)

    elif callback_query.data == "intrs_done":
        if len(hobbies) < 5:
            txt2 = "–í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!" if lang == "ru" else "You must select at least 5 interests to continue!"
            await callback_query.answer(
                txt2,
                show_alert=True
            )
            return
        else:
            user.hobbies = hobbies  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await user.save()
            if user.medias is None:
                txt3 = "–ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! ‚úÖ" if lang == "ru" else "Interests saved! ‚úÖ"
                await callback_query.answer(txt3, show_alert=True)

                txt = """üéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í–∞—à–∏ —Ö–æ–±–±–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.  

    –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç <b>1 –¥–æ 3 –º–µ–¥–∏–∞</b> (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –≤–∏–¥–µ–æ), —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º–æ–≥–ª–∏ —É–∑–Ω–∞—Ç—å –≤–∞—Å –ª—É—á—à–µ.  
    –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. ‚è©""" if lang == "ru" else """üéâ <b>Great!</b> Your hobbies have been successfully saved.  

    Now, please send <b>1 to 3 media</b> (photos or videos) so others can get to know you better.  
    Or press "Skip" to continue. ‚è©"""

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üîÑ" if lang == "ru" else "Skip üîÑ", callback_data="skip_album")]
                ])
                data = await state.get_data()
                msg =await callback_query.message.edit_text(txt, reply_markup=keyboard)
                data['idmsg_media']=msg.message_id
                await state.update_data(data)
                await state.set_state(RegState.media)
                return
            else:
                txt="–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å." if lang == "ru" else "Saved ‚úÖ\nClick /start to continue."
                await state.set_state(state=None)
                await callback_query.answer(txt, show_alert=True)

                if not all([
                        user.name,
                        user.age,
                        user.gender,
                        user.orientation,
                        user.for_whom,
                        user.preferences,
                        user.location,
                        user.about,
                        user.hobbies,
                        user.medias]):
                    await add_profile(message=callback_query.message, state=state , user=user, lang=lang)
                else:
                    await callback_query.message.edit_text(txt, reply_markup=None)
                return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page_size = 10
    start_index = (current_page - 1) * page_size
    end_index = start_index + page_size
    inlinekeyboard = []
    row = []

    for i, (number, interest_ru, interest_en) in enumerate(interests[start_index:end_index], start=1):
        text = ("üîπ" if str(number) in hobbies else "") + (interest_ru if lang == "ru" else interest_en)
        row.append(InlineKeyboardButton(
            text=text,
            callback_data=f"intrs_{number}"
        ))
        if len(row) == 2 or i == len(interests[start_index:end_index]):
            inlinekeyboard.append(row)
            row = []

    navigation_buttons = []
    if current_page > 1:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è" if lang == "ru" else "‚¨ÖÔ∏è Back", callback_data="intrs_page_back"))
    if end_index < len(interests):
        navigation_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è" if lang == "ru" else "‚û°Ô∏è Next", callback_data="intrs_page_next"))
    if navigation_buttons:
        inlinekeyboard.append(navigation_buttons)

    if len(hobbies) == 5:
        inlinekeyboard.append(
            [InlineKeyboardButton(text=f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å ({len(hobbies)}/5) ‚úÖ" if lang == "ru" else f"Save ({len(hobbies)}/5) ‚úÖ", callback_data="intrs_done")]
        )

    keyboard = InlineKeyboardMarkup(inline_keyboard=inlinekeyboard)
    txt = (f"<b>–í—ã–±—Ä–∞–Ω–æ {len(hobbies)}/5 —É–≤–ª–µ—á–µ–Ω–∏–π ‚úÖ</b>\n" if lang == "ru" else f"<b>Selected {len(hobbies)}/5 hobbies ‚úÖ</b>\n")
    txt += "–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏ –¥–æ 5 —É–≤–ª–µ—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç —Ç–µ–±—è. üåü\n\n‚û°Ô∏è –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É–≤–ª–µ—á–µ–Ω–∏—è. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–∂–º–∏ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'." if lang == "ru" else "Great, select up to 5 hobbies that describe you. üåü\n\n‚û°Ô∏è Click on the buttons to select your hobbies. Once you're done, click 'Save'."

    await callback_query.message.edit_text(txt, reply_markup=keyboard)